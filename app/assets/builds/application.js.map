{
  "version": 3,
  "sources": ["../../../node_modules/govuk-frontend/src/govuk/common/index.mjs", "../../../node_modules/govuk-frontend/src/govuk/common/normalise-dataset.mjs", "../../../node_modules/govuk-frontend/src/govuk/errors/index.mjs", "../../../node_modules/govuk-frontend/src/govuk/govuk-frontend-component.mjs", "../../../node_modules/govuk-frontend/src/govuk/i18n.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/accordion/accordion.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/button/button.mjs", "../../../node_modules/govuk-frontend/src/govuk/common/closest-attribute-value.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/character-count/character-count.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/checkboxes/checkboxes.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/error-summary/error-summary.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/exit-this-page/exit-this-page.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/header/header.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/notification-banner/notification-banner.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/radios/radios.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/skip-link/skip-link.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/tabs/tabs.mjs", "../../../node_modules/govuk-frontend/src/govuk/all.mjs", "../../javascript/application.js"],
  "sourcesContent": ["/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @param {...{ [key: string]: unknown }} configObjects - Config object to merge\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs(...configObjects) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @internal\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  function flattenObject(configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @internal\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    function flattenLoop(obj, prefix) {\n      for (const [key, value] of Object.entries(obj)) {\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n\n        // If the value is a nested object, recurse over that too\n        if (value && typeof value === 'object') {\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    const obj = flattenObject(configObject)\n\n    // Push their keys one-by-one into formattedConfigObject. Any duplicate\n    // keys will override the existing key with the new value.\n    for (const [key, value] of Object.entries(obj)) {\n      formattedConfigObject[key] = value\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @internal\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(configObject, namespace) {\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const [key, value] of Object.entries(configObject)) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    // Check if the first namespace matches the configured namespace\n    if (keyParts[0] === namespace) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n\n      // Add them to our new object\n      newObject[newKey] = value\n    }\n  }\n\n  return newObject\n}\n\n/**\n * Get hash fragment from URL\n *\n * Extract the hash fragment (everything after the hash) from a URL,\n * but not including the hash symbol\n *\n * @private\n * @param {string} url - URL\n * @returns {string | undefined} Fragment from URL, without the hash\n */\nexport function getFragmentFromUrl(url) {\n  if (!url.includes('#')) {\n    return undefined\n  }\n\n  return url.split('#').pop()\n}\n\n/**\n * Get GOV.UK Frontend breakpoint value from CSS custom property\n *\n * @private\n * @param {string} name - Breakpoint name\n * @returns {{ property: string, value?: string }} Breakpoint object\n */\nexport function getBreakpoint(name) {\n  const property = `--govuk-frontend-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * @private\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.addEventListener('blur', onBlur, { once: true })\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    options.onBlur?.call($element)\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus, { once: true })\n\n  // Focus element\n  options.onBeforeFocus?.call($element)\n  $element.focus()\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @internal\n * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Validate component config by schema\n *\n * @internal\n * @param {Schema} schema - Config schema\n * @param {{ [key: string]: unknown }} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    for (const { required, errorMessage } of conditions) {\n      if (!required.every((key) => !!config[key])) {\n        errors.push(errorMessage) // Missing config key value\n      }\n    }\n\n    // Check one condition passes or add errors\n    if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n      validationErrors.push(...errors)\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Schema for component config\n *\n * @typedef {object} Schema\n * @property {SchemaCondition[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema condition for component config\n *\n * @typedef {object} SchemaCondition\n * @property {string[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n", "/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {string | undefined} value - The value to normalise\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value) {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const trimmedValue = value.trim()\n\n  if (trimmedValue === 'true') {\n    return true\n  }\n\n  if (trimmedValue === 'false') {\n    return false\n  }\n\n  // Empty / whitespace-only strings are considered finite so we need to check\n  // the length of the trimmed string as well\n  if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n    return Number(trimmedValue)\n  }\n\n  return value\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using normaliseData function\n *\n * @internal\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {{ [key: string]: string | boolean | number | undefined }} Normalised dataset\n */\nexport function normaliseDataset(dataset) {\n  /** @type {ReturnType<typeof normaliseDataset>} */\n  const out = {}\n\n  for (const [key, value] of Object.entries(dataset)) {\n    out[key] = normaliseString(value)\n  }\n\n  return out\n}\n", "/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if GOV.UK Frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'GOV.UK Frontend initialised without `<body class=\"govuk-frontend-supported\">` from template `<script>` snippet'\n        : 'GOV.UK Frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'GOV.UK Frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @internal\n   * @overload\n   * @param {string} message - Element error message\n   */\n\n  /**\n   * @internal\n   * @overload\n   * @param {ElementErrorOptions} options - Element error options\n   */\n\n  /**\n   * @internal\n   * @param {string | ElementErrorOptions} messageOrOptions - Element error message or options\n   */\n  constructor(messageOrOptions) {\n    let message = typeof messageOrOptions === 'string' ? messageOrOptions : ''\n\n    // Build message from options\n    if (typeof messageOrOptions === 'object') {\n      const { componentName, identifier, element, expectedType } =\n        messageOrOptions\n\n      // Add prefix and identifier\n      message = `${componentName}: ${identifier}`\n\n      // Append reason\n      message += element\n        ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n        : ' not found'\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @internal\n * @typedef {object} ElementErrorOptions\n * @property {string} componentName - The name of the component throwing the error\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {Element | null} [element] - The element in error\n * @property {string} [expectedType] - The type that was expected for the identifier\n */\n", "import { isSupported } from './common/index.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @internal\n * @abstract\n */\nexport class GOVUKFrontendComponent {\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   */\n  constructor() {\n    this.checkSupport()\n  }\n\n  /**\n   * Validates whether GOV.UK Frontend is supported\n   *\n   * @private\n   * @throws {SupportError} when GOV.UK Frontend is not supported\n   */\n  checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n", "/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: unknown }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string | null} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations = {}, config = {}) {\n    // Make list of translations available throughout function\n    this.translations = translations\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = config.locale ?? (document.documentElement.lang || 'en')\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (typeof options?.count === 'number') {\n      // Get the plural suffix\n      lookupKey = `${lookupKey}.${this.getPluralSuffix(\n        lookupKey,\n        options.count\n      )}`\n    }\n\n    // Fetch the translation string for that lookup key\n    const translationString = this.translations[lookupKey]\n\n    if (typeof translationString === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translationString.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translationString, options)\n      }\n\n      return translationString\n    }\n\n    // If the key wasn't found in our translations object,\n    // return the lookup key itself as the fallback\n    return lookupKey\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    const formatter = Intl.NumberFormat.supportedLocalesOf(this.locale).length\n      ? new Intl.NumberFormat(this.locale)\n      : undefined\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        }\n\n        throw new Error(\n          `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n        )\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl.PluralRules\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The implementation of Intl supports PluralRules (NOT true in Safari 10â€“12)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * {@link https://browsersl.ist/#q=supports+es6-module+and+not+supports+intl-pluralrules}\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form â€“ if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    const preferredForm = this.hasIntlPluralRulesSupport()\n      ? new Intl.PluralRules(this.locale).select(count)\n      : this.selectPluralFormUsingFallbackRules(count)\n\n    // Use the correct plural form if provided\n    if (`${lookupKey}.${preferredForm}` in this.translations) {\n      return preferredForm\n      // Fall back to `other` if the plural form is missing, but log a warning\n      // to the console\n    } else if (`${lookupKey}.other` in this.translations) {\n      console.warn(\n        `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n      )\n\n      return 'other'\n    }\n\n    // If the required `other` plural form is missing, all we can do is error\n    throw new Error(\n      `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n    )\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @internal\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules(count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @internal\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale() {\n    const localeShort = this.locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      const languages = I18n.pluralRulesMap[pluralRule]\n      if (languages.includes(this.locale) || languages.includes(localeShort)) {\n        return pluralRule\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @internal\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af',\n      'sq',\n      'az',\n      'eu',\n      'bg',\n      'ca',\n      'da',\n      'nl',\n      'en',\n      'et',\n      'fi',\n      'ka',\n      'de',\n      'el',\n      'hu',\n      'lb',\n      'no',\n      'so',\n      'sw',\n      'sv',\n      'ta',\n      'te',\n      'tr',\n      'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @internal\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    arabic(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n % 100 >= 3 && n % 100 <= 10) {\n        return 'few'\n      }\n      if (n % 100 >= 11 && n % 100 <= 99) {\n        return 'many'\n      }\n      return 'other'\n    },\n    chinese() {\n      return 'other'\n    },\n    french(n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german(n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n >= 3 && n <= 6) {\n        return 'few'\n      }\n      if (n >= 7 && n <= 10) {\n        return 'many'\n      }\n      return 'other'\n    },\n    russian(n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) {\n        return 'one'\n      }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n        return 'few'\n      }\n      if (\n        last === 0 ||\n        (last >= 5 && last <= 9) ||\n        (lastTwo >= 11 && lastTwo <= 14)\n      ) {\n        return 'many'\n      }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish(n) {\n      if (n === 1 || n === 11) {\n        return 'one'\n      }\n      if (n === 2 || n === 12) {\n        return 'two'\n      }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) {\n        return 'few'\n      }\n      return 'other'\n    },\n    spanish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n % 1000000 === 0 && n !== 0) {\n        return 'many'\n      }\n      return 'other'\n    },\n    welsh(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n === 3) {\n        return 'few'\n      }\n      if (n === 6) {\n        return 'many'\n      }\n      return 'other'\n    }\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n", "import { mergeConfigs, extractConfigByNamespace } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Accordion component\n *\n * This allows a collection of sections to be collapsed by default, showing only\n * their headers. Sections can be expanded or collapsed individually by clicking\n * their headers. A \"Show all sections\" button is also added to the top of the\n * accordion, which switches to \"Hide all sections\" when all the sections are\n * expanded.\n *\n * The state of each section is saved to the DOM via the `aria-expanded`\n * attribute, which also provides accessibility.\n *\n * @preserve\n */\nexport class Accordion extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {AccordionConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  controlsClass = 'govuk-accordion__controls'\n\n  /** @private */\n  showAllClass = 'govuk-accordion__show-all'\n\n  /** @private */\n  showAllTextClass = 'govuk-accordion__show-all-text'\n\n  /** @private */\n  sectionClass = 'govuk-accordion__section'\n\n  /** @private */\n  sectionExpandedClass = 'govuk-accordion__section--expanded'\n\n  /** @private */\n  sectionButtonClass = 'govuk-accordion__section-button'\n\n  /** @private */\n  sectionHeaderClass = 'govuk-accordion__section-header'\n\n  /** @private */\n  sectionHeadingClass = 'govuk-accordion__section-heading'\n\n  /** @private */\n  sectionHeadingDividerClass = 'govuk-accordion__section-heading-divider'\n\n  /** @private */\n  sectionHeadingTextClass = 'govuk-accordion__section-heading-text'\n\n  /** @private */\n  sectionHeadingTextFocusClass = 'govuk-accordion__section-heading-text-focus'\n\n  /** @private */\n  sectionShowHideToggleClass = 'govuk-accordion__section-toggle'\n\n  /** @private */\n  sectionShowHideToggleFocusClass = 'govuk-accordion__section-toggle-focus'\n\n  /** @private */\n  sectionShowHideTextClass = 'govuk-accordion__section-toggle-text'\n\n  /** @private */\n  upChevronIconClass = 'govuk-accordion-nav__chevron'\n\n  /** @private */\n  downChevronIconClass = 'govuk-accordion-nav__chevron--down'\n\n  /** @private */\n  sectionSummaryClass = 'govuk-accordion__section-summary'\n\n  /** @private */\n  sectionSummaryFocusClass = 'govuk-accordion__section-summary-focus'\n\n  /** @private */\n  sectionContentClass = 'govuk-accordion__section-content'\n\n  /** @private */\n  $sections\n\n  /** @private */\n  browserSupportsSessionStorage = false\n\n  /**\n   * @private\n   * @type {HTMLButtonElement | null}\n   */\n  $showAllButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllIcon = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllText = null\n\n  /**\n   * @param {Element | null} $module - HTML element to use for accordion\n   * @param {AccordionConfig} [config] - Accordion config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      Accordion.defaults,\n      config,\n      normaliseDataset($module.dataset)\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'))\n\n    const $sections = this.$module.querySelectorAll(`.${this.sectionClass}`)\n    if (!$sections.length) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Sections (\\`<div class=\"${this.sectionClass}\">\\`)`\n      })\n    }\n\n    this.$sections = $sections\n    this.browserSupportsSessionStorage = helper.checkForSessionStorage()\n\n    this.initControls()\n    this.initSectionHeaders()\n\n    // See if \"Show all sections\" button text should be updated\n    const areAllSectionsOpen = this.checkIfAllSectionsOpen()\n    this.updateShowAllButton(areAllSectionsOpen)\n  }\n\n  /**\n   * Initialise controls and set attributes\n   *\n   * @private\n   */\n  initControls() {\n    // Create \"Show all\" button and set attributes\n    this.$showAllButton = document.createElement('button')\n    this.$showAllButton.setAttribute('type', 'button')\n    this.$showAllButton.setAttribute('class', this.showAllClass)\n    this.$showAllButton.setAttribute('aria-expanded', 'false')\n\n    // Create icon, add to element\n    this.$showAllIcon = document.createElement('span')\n    this.$showAllIcon.classList.add(this.upChevronIconClass)\n    this.$showAllButton.appendChild(this.$showAllIcon)\n\n    // Create control wrapper and add controls to it\n    const $accordionControls = document.createElement('div')\n    $accordionControls.setAttribute('class', this.controlsClass)\n    $accordionControls.appendChild(this.$showAllButton)\n    this.$module.insertBefore($accordionControls, this.$module.firstChild)\n\n    // Build additional wrapper for Show all toggle text and place after icon\n    this.$showAllText = document.createElement('span')\n    this.$showAllText.classList.add(this.showAllTextClass)\n    this.$showAllButton.appendChild(this.$showAllText)\n\n    // Handle click events on the show/hide all button\n    this.$showAllButton.addEventListener('click', () =>\n      this.onShowOrHideAllToggle()\n    )\n\n    // Handle 'beforematch' events, if the user agent supports them\n    if ('onbeforematch' in document) {\n      document.addEventListener('beforematch', (event) =>\n        this.onBeforeMatch(event)\n      )\n    }\n  }\n\n  /**\n   * Initialise section headers\n   *\n   * @private\n   */\n  initSectionHeaders() {\n    this.$sections.forEach(($section, i) => {\n      const $header = $section.querySelector(`.${this.sectionHeaderClass}`)\n      if (!$header) {\n        throw new ElementError({\n          componentName: 'Accordion',\n          identifier: `Section headers (\\`<div class=\"${this.sectionHeaderClass}\">\\`)`\n        })\n      }\n\n      // Set header attributes\n      this.constructHeaderMarkup($header, i)\n      this.setExpanded(this.isExpanded($section), $section)\n\n      // Handle events\n      $header.addEventListener('click', () => this.onSectionToggle($section))\n\n      // See if there is any state stored in sessionStorage and set the sections\n      // to open or closed.\n      this.setInitialState($section)\n    })\n  }\n\n  /**\n   * Construct section header\n   *\n   * @private\n   * @param {Element} $header - Section header\n   * @param {number} index - Section index\n   */\n  constructHeaderMarkup($header, index) {\n    const $span = $header.querySelector(`.${this.sectionButtonClass}`)\n    const $heading = $header.querySelector(`.${this.sectionHeadingClass}`)\n    const $summary = $header.querySelector(`.${this.sectionSummaryClass}`)\n\n    if (!$heading) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Section heading (\\`.${this.sectionHeadingClass}\\`)`\n      })\n    }\n\n    if (!$span) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Section button placeholder (\\`<span class=\"${this.sectionButtonClass}\">\\`)`\n      })\n    }\n\n    // Create a button element that will replace the\n    // '.govuk-accordion__section-button' span\n    const $button = document.createElement('button')\n    $button.setAttribute('type', 'button')\n    $button.setAttribute(\n      'aria-controls',\n      `${this.$module.id}-content-${index + 1}`\n    )\n\n    // Copy all attributes from $span to $button (except `id`, which gets added\n    // to the `$headingText` element)\n    for (const attr of Array.from($span.attributes)) {\n      if (attr.nodeName !== 'id') {\n        $button.setAttribute(attr.nodeName, `${attr.nodeValue}`)\n      }\n    }\n\n    // Create container for heading text so it can be styled\n    const $headingText = document.createElement('span')\n    $headingText.classList.add(this.sectionHeadingTextClass)\n    // Copy the span ID to the heading text to allow it to be referenced by\n    // `aria-labelledby` on the hidden content area without \"Show this section\"\n    $headingText.id = $span.id\n\n    // Create an inner heading text container to limit the width of the focus\n    // state\n    const $headingTextFocus = document.createElement('span')\n    $headingTextFocus.classList.add(this.sectionHeadingTextFocusClass)\n    $headingText.appendChild($headingTextFocus)\n    // span could contain HTML elements\n    // (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n    $headingTextFocus.innerHTML = $span.innerHTML\n\n    // Create container for show / hide icons and text.\n    const $showHideToggle = document.createElement('span')\n    $showHideToggle.classList.add(this.sectionShowHideToggleClass)\n    // Tell Google not to index the 'show' text as part of the heading. Must be\n    // set on the element before it's added to the DOM.\n    // See https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr\n    $showHideToggle.setAttribute('data-nosnippet', '')\n    // Create an inner container to limit the width of the focus state\n    const $showHideToggleFocus = document.createElement('span')\n    $showHideToggleFocus.classList.add(this.sectionShowHideToggleFocusClass)\n    $showHideToggle.appendChild($showHideToggleFocus)\n    // Create wrapper for the show / hide text. Append text after the show/hide icon\n    const $showHideText = document.createElement('span')\n    const $showHideIcon = document.createElement('span')\n    $showHideIcon.classList.add(this.upChevronIconClass)\n    $showHideToggleFocus.appendChild($showHideIcon)\n    $showHideText.classList.add(this.sectionShowHideTextClass)\n    $showHideToggleFocus.appendChild($showHideText)\n\n    // Append elements to the button:\n    // 1. Heading text\n    // 2. Punctuation\n    // 3. (Optional: Summary line followed by punctuation)\n    // 4. Show / hide toggle\n    $button.appendChild($headingText)\n    $button.appendChild(this.getButtonPunctuationEl())\n\n    // If summary content exists add to DOM in correct order\n    if ($summary?.parentNode) {\n      // Create a new `span` element and copy the summary line content from the\n      // original `div` to the new `span`. This is because the summary line text\n      // is now inside a button element, which can only contain phrasing\n      // content.\n      const $summarySpan = document.createElement('span')\n      // Create an inner summary container to limit the width of the summary\n      // focus state\n      const $summarySpanFocus = document.createElement('span')\n      $summarySpanFocus.classList.add(this.sectionSummaryFocusClass)\n      $summarySpan.appendChild($summarySpanFocus)\n\n      // Get original attributes, and pass them to the replacement\n      for (const attr of Array.from($summary.attributes)) {\n        $summarySpan.setAttribute(attr.nodeName, `${attr.nodeValue}`)\n      }\n\n      // Copy original contents of summary to the new summary span\n      $summarySpanFocus.innerHTML = $summary.innerHTML\n\n      // Replace the original summary `div` with the new summary `span`\n      $summary.parentNode.replaceChild($summarySpan, $summary)\n\n      $button.appendChild($summarySpan)\n      $button.appendChild(this.getButtonPunctuationEl())\n    }\n\n    $button.appendChild($showHideToggle)\n\n    $heading.removeChild($span)\n    $heading.appendChild($button)\n  }\n\n  /**\n   * When a section is opened by the user agent via the 'beforematch' event\n   *\n   * @private\n   * @param {Event} event - Generic event\n   */\n  onBeforeMatch(event) {\n    const $fragment = event.target\n\n    // Handle elements with `.closest()` support only\n    if (!($fragment instanceof Element)) {\n      return\n    }\n\n    // Handle when fragment is inside section\n    const $section = $fragment.closest(`.${this.sectionClass}`)\n    if ($section) {\n      this.setExpanded(true, $section)\n    }\n  }\n\n  /**\n   * When section toggled, set and store state\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  onSectionToggle($section) {\n    const expanded = this.isExpanded($section)\n    this.setExpanded(!expanded, $section)\n\n    // Store the state in sessionStorage when a change is triggered\n    this.storeState($section)\n  }\n\n  /**\n   * When Open/Close All toggled, set and store state\n   *\n   * @private\n   */\n  onShowOrHideAllToggle() {\n    const nowExpanded = !this.checkIfAllSectionsOpen()\n\n    this.$sections.forEach(($section) => {\n      this.setExpanded(nowExpanded, $section)\n      this.storeState($section)\n    })\n\n    this.updateShowAllButton(nowExpanded)\n  }\n\n  /**\n   * Set section attributes when opened/closed\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   * @param {Element} $section - Section element\n   */\n  setExpanded(expanded, $section) {\n    const $showHideIcon = $section.querySelector(`.${this.upChevronIconClass}`)\n    const $showHideText = $section.querySelector(\n      `.${this.sectionShowHideTextClass}`\n    )\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n    const $content = $section.querySelector(`.${this.sectionContentClass}`)\n\n    if (!$content) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Section content (\\`<div class=\"${this.sectionContentClass}\">\\`)`\n      })\n    }\n\n    if (!$showHideIcon || !$showHideText || !$button) {\n      // Return early for elements we create\n      return\n    }\n\n    const newButtonText = expanded\n      ? this.i18n.t('hideSection')\n      : this.i18n.t('showSection')\n\n    $showHideText.textContent = newButtonText\n    $button.setAttribute('aria-expanded', `${expanded}`)\n\n    // Update aria-label combining\n    const ariaLabelParts = []\n\n    const $headingText = $section.querySelector(\n      `.${this.sectionHeadingTextClass}`\n    )\n    if ($headingText) {\n      ariaLabelParts.push(`${$headingText.textContent}`.trim())\n    }\n\n    const $summary = $section.querySelector(`.${this.sectionSummaryClass}`)\n    if ($summary) {\n      ariaLabelParts.push(`${$summary.textContent}`.trim())\n    }\n\n    const ariaLabelMessage = expanded\n      ? this.i18n.t('hideSectionAriaLabel')\n      : this.i18n.t('showSectionAriaLabel')\n    ariaLabelParts.push(ariaLabelMessage)\n\n    /*\n     * Join with a comma to add pause for assistive technology.\n     * Example: [heading]Section A ,[pause] Show this section.\n     * https://accessibility.blog.gov.uk/2017/12/18/what-working-on-gov-uk-navigation-taught-us-about-accessibility/\n     */\n    $button.setAttribute('aria-label', ariaLabelParts.join(' , '))\n\n    // Swap icon, change class\n    if (expanded) {\n      $content.removeAttribute('hidden')\n      $section.classList.add(this.sectionExpandedClass)\n      $showHideIcon.classList.remove(this.downChevronIconClass)\n    } else {\n      $content.setAttribute('hidden', 'until-found')\n      $section.classList.remove(this.sectionExpandedClass)\n      $showHideIcon.classList.add(this.downChevronIconClass)\n    }\n\n    // See if \"Show all sections\" button text should be updated\n    const areAllSectionsOpen = this.checkIfAllSectionsOpen()\n    this.updateShowAllButton(areAllSectionsOpen)\n  }\n\n  /**\n   * Get state of section\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @returns {boolean} True if expanded\n   */\n  isExpanded($section) {\n    return $section.classList.contains(this.sectionExpandedClass)\n  }\n\n  /**\n   * Check if all sections are open\n   *\n   * @private\n   * @returns {boolean} True if all sections are open\n   */\n  checkIfAllSectionsOpen() {\n    const sectionsCount = this.$sections.length\n    const expandedSectionCount = this.$module.querySelectorAll(\n      `.${this.sectionExpandedClass}`\n    ).length\n    const areAllSectionsOpen = sectionsCount === expandedSectionCount\n\n    return areAllSectionsOpen\n  }\n\n  /**\n   * Update \"Show all sections\" button\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   */\n  updateShowAllButton(expanded) {\n    if (!this.$showAllButton || !this.$showAllText || !this.$showAllIcon) {\n      return\n    }\n\n    this.$showAllButton.setAttribute('aria-expanded', expanded.toString())\n    this.$showAllText.textContent = expanded\n      ? this.i18n.t('hideAllSections')\n      : this.i18n.t('showAllSections')\n    this.$showAllIcon.classList.toggle(this.downChevronIconClass, !expanded)\n  }\n\n  /**\n   * Set the state of the accordions in sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  storeState($section) {\n    if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n      // We need a unique way of identifying each content in the Accordion.\n      // Since an `#id` should be unique and an `id` is required for `aria-`\n      // attributes `id` can be safely used.\n      const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n      if ($button) {\n        const contentId = $button.getAttribute('aria-controls')\n        const contentState = $button.getAttribute('aria-expanded')\n\n        // Only set the state when both `contentId` and `contentState` are taken\n        // from the DOM.\n        if (contentId && contentState) {\n          window.sessionStorage.setItem(contentId, contentState)\n        }\n      }\n    }\n  }\n\n  /**\n   * Read the state of the accordions from sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  setInitialState($section) {\n    if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n      const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n      if ($button) {\n        const contentId = $button.getAttribute('aria-controls')\n        const contentState = contentId\n          ? window.sessionStorage.getItem(contentId)\n          : null\n\n        if (contentState !== null) {\n          this.setExpanded(contentState === 'true', $section)\n        }\n      }\n    }\n  }\n\n  /**\n   * Create an element to improve semantics of the section button with\n   * punctuation\n   *\n   * Adding punctuation to the button can also improve its general semantics by\n   * dividing its contents into thematic chunks. See\n   * https://github.com/alphagov/govuk-frontend/issues/2327#issuecomment-922957442\n   *\n   * @private\n   * @returns {Element} DOM element\n   */\n  getButtonPunctuationEl() {\n    const $punctuationEl = document.createElement('span')\n    $punctuationEl.classList.add(\n      'govuk-visually-hidden',\n      this.sectionHeadingDividerClass\n    )\n    $punctuationEl.innerHTML = ', '\n    return $punctuationEl\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-accordion'\n\n  /**\n   * Accordion default config\n   *\n   * @see {@link AccordionConfig}\n   * @constant\n   * @type {AccordionConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      hideAllSections: 'Hide all sections',\n      hideSection: 'Hide',\n      hideSectionAriaLabel: 'Hide this section',\n      showAllSections: 'Show all sections',\n      showSection: 'Show',\n      showSectionAriaLabel: 'Show this section'\n    },\n    rememberExpanded: true\n  })\n}\n\nconst helper = {\n  /**\n   * Check for `window.sessionStorage`, and that it actually works.\n   *\n   * @returns {boolean} True if session storage is available\n   */\n  checkForSessionStorage: function () {\n    const testString = 'this is the test string'\n    let result\n    try {\n      window.sessionStorage.setItem(testString, testString)\n      result =\n        window.sessionStorage.getItem(testString) === testString.toString()\n      window.sessionStorage.removeItem(testString)\n      return result\n    } catch (exception) {\n      return false\n    }\n  }\n}\n\n/**\n * Accordion config\n *\n * @see {@link Accordion.defaults}\n * @typedef {object} AccordionConfig\n * @property {AccordionTranslations} [i18n=Accordion.defaults.i18n] - Accordion translations\n * @property {boolean} [rememberExpanded] - Whether the expanded and collapsed\n *   state of each section is remembered and restored when navigating.\n */\n\n/**\n * Accordion translations\n *\n * @see {@link Accordion.defaults.i18n}\n * @typedef {object} AccordionTranslations\n *\n * Messages used by the component for the labels of its buttons. This includes\n * the visible text shown on screen, and text to help assistive technology users\n * for the buttons toggling each section.\n * @property {string} [hideAllSections] - The text content for the 'Hide all\n *   sections' button, used when at least one section is expanded.\n * @property {string} [hideSection] - The text content for the 'Hide'\n *   button, used when a section is expanded.\n * @property {string} [hideSectionAriaLabel] - The text content appended to the\n *   'Hide' button's accessible name when a section is expanded.\n * @property {string} [showAllSections] - The text content for the 'Show all\n *   sections' button, used when all sections are collapsed.\n * @property {string} [showSection] - The text content for the 'Show'\n *   button, used when a section is collapsed.\n * @property {string} [showSectionAriaLabel] - The text content appended to the\n *   'Show' button's accessible name when a section is expanded.\n */\n", "import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\nconst KEY_SPACE = 32\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * JavaScript enhancements for the Button component\n *\n * @preserve\n */\nexport class Button extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ButtonConfig}\n   */\n  config\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  debounceFormSubmitTimer = null\n\n  /**\n   * @param {Element | null} $module - HTML element to use for button\n   * @param {ButtonConfig} [config] - Button config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Button',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      Button.defaults,\n      config,\n      normaliseDataset($module.dataset)\n    )\n\n    this.$module.addEventListener('keydown', (event) =>\n      this.handleKeyDown(event)\n    )\n    this.$module.addEventListener('click', (event) => this.debounce(event))\n  }\n\n  /**\n   * Trigger a click event when the space key is pressed\n   *\n   * Some screen readers tell users they can use the space bar to activate\n   * things with the 'button' role, so we need to match the functionality of\n   * native HTML buttons.\n   *\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown(event) {\n    const $target = event.target\n\n    // Handle space bar only\n    if (event.keyCode !== KEY_SPACE) {\n      return\n    }\n\n    // Handle elements with [role=\"button\"] only\n    if (\n      $target instanceof HTMLElement &&\n      $target.getAttribute('role') === 'button'\n    ) {\n      event.preventDefault() // prevent the page from scrolling\n      $target.click()\n    }\n  }\n\n  /**\n   * Debounce double-clicks\n   *\n   * If the click quickly succeeds a previous click then nothing will happen.\n   * This stops people accidentally causing multiple form submissions by double\n   * clicking buttons.\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {undefined | false} Returns undefined, or false when debounced\n   */\n  debounce(event) {\n    // Check the button that was clicked has preventDoubleClick enabled\n    if (!this.config.preventDoubleClick) {\n      return\n    }\n\n    // If the timer is still running, prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false\n    }\n\n    this.debounceFormSubmitTimer = window.setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-button'\n\n  /**\n   * Button default config\n   *\n   * @see {@link ButtonConfig}\n   * @constant\n   * @type {ButtonConfig}\n   */\n  static defaults = Object.freeze({\n    preventDoubleClick: false\n  })\n}\n\n/**\n * Button config\n *\n * @typedef {object} ButtonConfig\n * @property {boolean} [preventDoubleClick=false] - Prevent accidental double\n *   clicks on submit buttons from submitting forms multiple times.\n */\n", "/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @internal\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n", "import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport {\n  extractConfigByNamespace,\n  mergeConfigs,\n  validateConfig\n} from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ConfigError, ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n *\n * @preserve\n */\nexport class CharacterCount extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $textarea\n\n  /** @private */\n  $visibleCountMessage\n\n  /** @private */\n  $screenReaderCountMessage\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n\n  /** @private */\n  lastInputValue = ''\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /**\n   * @private\n   * @type {CharacterCountConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  maxLength\n\n  /**\n   * @param {Element | null} $module - HTML element to use for character count\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Character count',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $textarea = $module.querySelector('.govuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError({\n        componentName: 'Character count',\n        element: $textarea,\n        expectedType: 'HTMLTextareaElement or HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-character-count`)'\n      })\n    }\n\n    // Read config set using dataset ('data-' values)\n    const datasetConfig = normaliseDataset($module.dataset)\n\n    // To ensure data-attributes take complete precedence, even if they change\n    // the type of count, we need to reset the `maxlength` and `maxwords` from\n    // the JavaScript config.\n    //\n    // We can't mutate `config`, though, as it may be shared across multiple\n    // components inside `initAll`.\n    /** @type {CharacterCountConfig} */\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    this.config = mergeConfigs(\n      CharacterCount.defaults,\n      config,\n      configOverrides,\n      datasetConfig\n    )\n\n    // Check for valid config\n    const errors = validateConfig(CharacterCount.schema, this.config)\n    if (errors[0]) {\n      throw new ConfigError(`Character count: ${errors[0]}`)\n    }\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'), {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue($module, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords ?? this.config.maxlength ?? Infinity\n\n    this.$module = $module\n    this.$textarea = $textarea\n\n    const textareaDescriptionId = `${this.$textarea.id}-info`\n    const $textareaDescription = document.getElementById(textareaDescriptionId)\n    if (!$textareaDescription) {\n      throw new ElementError({\n        componentName: 'Character count',\n        element: $textareaDescription,\n        identifier: `Count message (\\`id=\"${textareaDescriptionId}\"\\`)`\n      })\n    }\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    if (`${$textareaDescription.textContent}`.match(/^\\s*$/)) {\n      $textareaDescription.textContent = this.i18n.t('textareaDescription', {\n        count: this.maxLength\n      })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'govuk-character-count__sr-status govuk-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('govuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('govuk-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   *\n   * @private\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   *\n   * @private\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify\n   * the fields by directly changing its `value`. These changes don't trigger\n   * events in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check\n   * if the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   *\n   * @private\n   */\n  handleFocus() {\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.updateIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   *\n   * @private\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    if (this.valueChecker) {\n      window.clearInterval(this.valueChecker)\n    }\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   *\n   * @private\n   */\n  updateIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   *\n   * @private\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   *\n   * @private\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const isError = remainingNumber < 0\n\n    // If input is over the threshold, remove the disabled class which renders\n    // the counter invisible.\n    this.$visibleCountMessage.classList.toggle(\n      'govuk-character-count__message--disabled',\n      !this.isOverThreshold()\n    )\n\n    // Update styles\n    this.$textarea.classList.toggle('govuk-textarea--error', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-error-message', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-hint', !isError)\n\n    // Update message\n    this.$visibleCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   *\n   * @private\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @private\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count(text) {\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) ?? [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    }\n\n    return text.length\n  }\n\n  /**\n   * Get count message\n   *\n   * @private\n   * @returns {string} Status message\n   */\n  getCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const countType = this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @private\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage(remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix =\n      remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, {\n      count: Math.abs(remainingNumber)\n    })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @private\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold() {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = (maxLength * this.config.threshold) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n\n  /**\n   * Character count config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    anyOf: [\n      {\n        required: ['maxwords'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      },\n      {\n        required: ['maxlength'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      }\n    ]\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\n */\n", "import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Checkboxes component\n *\n * @preserve\n */\nexport class Checkboxes extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $inputs\n\n  /**\n   * Checkboxes can be associated with a 'conditionally revealed' content block\n   * â€“ for example, a checkbox for 'Phone' could reveal an additional form field\n   * for the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the checkbox state.\n   *\n   * @param {Element | null} $module - HTML element to use for checkboxes\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Checkboxes',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $inputs = $module.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        componentName: 'Checkboxes',\n        identifier: 'Form inputs (`<input type=\"checkbox\">`)'\n      })\n    }\n\n    this.$module = $module\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          componentName: 'Checkboxes',\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this $module.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if (\n      $target &&\n      $target.classList.contains('govuk-checkboxes__conditional')\n    ) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-checkboxes__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the same name value, and uncheck them.\n   * This is useful for when a â€œNone of these\" checkbox is checked.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept($input) {\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"][name=\"${$input.name}\"]`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = $input.form === $inputWithSameName.form\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        $inputWithSameName.checked = false\n        this.syncConditionalRevealWithInputState($inputWithSameName)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive checkboxes\n   *\n   * Find any checkbox inputs with the same name value and the 'exclusive'\n   * behaviour, and uncheck them. This helps prevent someone checking both a\n   * regular checkbox and a \"None of these\" checkbox in the same fieldset.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs($input) {\n    const allInputsWithSameNameAndExclusiveBehaviour =\n      document.querySelectorAll(\n        `input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"${$input.name}\"]`\n      )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = $input.form === $exclusiveInput.form\n      if (hasSameFormOwner) {\n        $exclusiveInput.checked = false\n        this.syncConditionalRevealWithInputState($exclusiveInput)\n      }\n    })\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the $module â€“ if the click occurred on a checkbox,\n   * sync the state of any associated conditional reveal with the checkbox\n   * state.\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'checkbox'\n    ) {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    const hasBehaviourExclusive =\n      $clickedInput.getAttribute('data-behaviour') === 'exclusive'\n    if (hasBehaviourExclusive) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-checkboxes'\n}\n", "import {\n  getFragmentFromUrl,\n  mergeConfigs,\n  setFocus\n} from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Error summary component\n *\n * Takes focus on initialisation for accessible announcement, unless disabled in\n * configuration.\n *\n * @preserve\n */\nexport class ErrorSummary extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ErrorSummaryConfig}\n   */\n  config\n\n  /**\n   * @param {Element | null} $module - HTML element to use for error summary\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Error summary',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      ErrorSummary.defaults,\n      config,\n      normaliseDataset($module.dataset)\n    )\n\n    /**\n     * Focus the error summary\n     */\n    if (!this.config.disableAutoFocus) {\n      setFocus(this.$module)\n    }\n\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Click event handler\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $target = event.target\n    if ($target && this.focusTarget($target)) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our\n   * labels or legends appear above the input, this means the user will be\n   * presented with an input without any context, as the label or legend will be\n   * off the top of the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and\n   * then focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA (as tested in 2018.3.2) - without this only the field type is\n   * announced (e.g. \"Edit, has autocomplete\").\n   *\n   * @private\n   * @param {EventTarget} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n  focusTarget($target) {\n    // If the element that was clicked was not a link, return early\n    if (!($target instanceof HTMLAnchorElement)) {\n      return false\n    }\n\n    const inputId = getFragmentFromUrl($target.href)\n    if (!inputId) {\n      return false\n    }\n\n    const $input = document.getElementById(inputId)\n    if (!$input) {\n      return false\n    }\n\n    const $legendOrLabel = this.getAssociatedLegendOrLabel($input)\n    if (!$legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input\n    // to avoid extra scrolling in browsers that don't support `preventScroll`\n    // (which at time of writing is most of them...)\n    $legendOrLabel.scrollIntoView()\n    $input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for=\"inputId\"\n   * - The closest parent `<label>`\n   *\n   * @private\n   * @param {Element} $input - The input\n   * @returns {Element | null} Associated legend or label, or null if no\n   *   associated legend or label can be found\n   */\n  getAssociatedLegendOrLabel($input) {\n    const $fieldset = $input.closest('fieldset')\n\n    if ($fieldset) {\n      const $legends = $fieldset.getElementsByTagName('legend')\n\n      if ($legends.length) {\n        const $candidateLegend = $legends[0]\n\n        // If the input type is radio or checkbox, always use the legend if\n        // there is one.\n        if (\n          $input instanceof HTMLInputElement &&\n          ($input.type === 'checkbox' || $input.type === 'radio')\n        ) {\n          return $candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldsetâ€™s legend (instead\n        // of the label associated with the input) if the input would end up in\n        // the top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = $candidateLegend.getBoundingClientRect().top\n        const inputRect = $input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend\n          }\n        }\n      }\n    }\n\n    return (\n      document.querySelector(`label[for='${$input.getAttribute('id')}']`) ??\n      $input.closest('label')\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-error-summary'\n\n  /**\n   * Error summary default config\n   *\n   * @see {@link ErrorSummaryConfig}\n   * @constant\n   * @type {ErrorSummaryConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n}\n\n/**\n * Error summary config\n *\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n", "import { mergeConfigs, extractConfigByNamespace } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Exit this page component\n *\n * @preserve\n */\nexport class ExitThisPage extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ExitThisPageConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  $button\n\n  /**\n   * @private\n   * @type {HTMLAnchorElement | null}\n   */\n  $skiplinkButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $updateSpan = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $indicatorContainer = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $overlay = null\n\n  /** @private */\n  keypressCounter = 0\n\n  /** @private */\n  lastKeyWasModified = false\n\n  /** @private */\n  timeoutTime = 5000 // milliseconds\n\n  // Store the timeout events so that we can clear them to avoid user keypresses overlapping\n  // setTimeout returns an id that we can use to clear it with clearTimeout,\n  // hence the 'Id' suffix\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  keypressTimeoutId = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  timeoutMessageId = null\n\n  /**\n   * @param {Element | null} $module - HTML element that wraps the Exit This Page button\n   * @param {ExitThisPageConfig} [config] - Exit This Page config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Exit this page',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $button = $module.querySelector('.govuk-exit-this-page__button')\n    if (!($button instanceof HTMLAnchorElement)) {\n      throw new ElementError({\n        componentName: 'Exit this page',\n        element: $button,\n        expectedType: 'HTMLAnchorElement',\n        identifier: 'Button (`.govuk-exit-this-page__button`)'\n      })\n    }\n\n    this.config = mergeConfigs(\n      ExitThisPage.defaults,\n      config,\n      normaliseDataset($module.dataset)\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'))\n    this.$module = $module\n    this.$button = $button\n\n    const $skiplinkButton = document.querySelector(\n      '.govuk-js-exit-this-page-skiplink'\n    )\n    if ($skiplinkButton instanceof HTMLAnchorElement) {\n      this.$skiplinkButton = $skiplinkButton\n    }\n\n    this.buildIndicator()\n    this.initUpdateSpan()\n    this.initButtonClickHandler()\n\n    // Check to see if this has already been done by a previous initialisation of ExitThisPage\n    if (!('govukFrontendExitThisPageKeypress' in document.body.dataset)) {\n      document.addEventListener('keyup', this.handleKeypress.bind(this), true)\n      document.body.dataset.govukFrontendExitThisPageKeypress = 'true'\n    }\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // blank overlay remains present, rendering the page unusable. Here, we check\n    // to see if it's present on page (re)load, and remove it if so.\n    window.addEventListener('pageshow', this.resetPage.bind(this))\n  }\n\n  /**\n   * Create the <span> we use for screen reader announcements.\n   *\n   * @private\n   */\n  initUpdateSpan() {\n    this.$updateSpan = document.createElement('span')\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.className = 'govuk-visually-hidden'\n\n    this.$module.appendChild(this.$updateSpan)\n  }\n\n  /**\n   * Create button click handlers.\n   *\n   * @private\n   */\n  initButtonClickHandler() {\n    // Main EtP button\n    this.$button.addEventListener('click', this.handleClick.bind(this))\n\n    // EtP secondary link\n    if (this.$skiplinkButton) {\n      this.$skiplinkButton.addEventListener(\n        'click',\n        this.handleClick.bind(this)\n      )\n    }\n  }\n\n  /**\n   * Create the HTML for the 'three lights' indicator on the button.\n   *\n   * @private\n   */\n  buildIndicator() {\n    // Build container\n    // Putting `aria-hidden` on it as it won't contain any readable information\n    this.$indicatorContainer = document.createElement('div')\n    this.$indicatorContainer.className = 'govuk-exit-this-page__indicator'\n    this.$indicatorContainer.setAttribute('aria-hidden', 'true')\n\n    // Create three 'lights' and place them within the container\n    for (let i = 0; i < 3; i++) {\n      const $indicator = document.createElement('div')\n      $indicator.className = 'govuk-exit-this-page__indicator-light'\n      this.$indicatorContainer.appendChild($indicator)\n    }\n\n    // Append it all to the module\n    this.$button.appendChild(this.$indicatorContainer)\n  }\n\n  /**\n   * Update whether the lights are visible and which ones are lit up depending on\n   * the value of `keypressCounter`.\n   *\n   * @private\n   */\n  updateIndicator() {\n    if (!this.$indicatorContainer) {\n      return\n    }\n\n    // Show or hide the indicator container depending on keypressCounter value\n    this.$indicatorContainer.classList.toggle(\n      'govuk-exit-this-page__indicator--visible',\n      this.keypressCounter > 0\n    )\n\n    // Turn on only the indicators we want on\n    const $indicators = this.$indicatorContainer.querySelectorAll(\n      '.govuk-exit-this-page__indicator-light'\n    )\n    $indicators.forEach(($indicator, index) => {\n      $indicator.classList.toggle(\n        'govuk-exit-this-page__indicator-light--on',\n        index < this.keypressCounter\n      )\n    })\n  }\n\n  /**\n   * Initiates the redirection away from the current page.\n   * Includes the loading overlay functionality, which covers the current page with a\n   * white overlay so that the contents are not visible during the loading\n   * process. This is particularly important on slow network connections.\n   *\n   * @private\n   */\n  exitPage() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    this.$updateSpan.textContent = ''\n\n    // Blank the page\n    // As well as creating an overlay with text, we also set the body to hidden\n    // to prevent screen reader and sequential navigation users potentially\n    // navigating through the page behind the overlay during loading\n    document.body.classList.add('govuk-exit-this-page-hide-content')\n    this.$overlay = document.createElement('div')\n    this.$overlay.className = 'govuk-exit-this-page-overlay'\n    this.$overlay.setAttribute('role', 'alert')\n\n    // we do these this way round, thus incurring a second paint, because changing\n    // the element text after adding it means that screen readers pick up the\n    // announcement more reliably.\n    document.body.appendChild(this.$overlay)\n    this.$overlay.textContent = this.i18n.t('activated')\n\n    window.location.href = this.$button.href\n  }\n\n  /**\n   * Pre-activation logic for when the button is clicked/activated via mouse or\n   * pointer.\n   *\n   * We do this to differentiate it from the keyboard activation event because we\n   * need to run `e.preventDefault` as the button or skiplink are both links and we\n   * want to apply some additional logic in `exitPage` before navigating.\n   *\n   * @private\n   * @param {MouseEvent} event - mouse click event\n   */\n  handleClick(event) {\n    event.preventDefault()\n    this.exitPage()\n  }\n\n  /**\n   * Logic for the 'quick escape' keyboard sequence functionality (pressing the\n   * Shift key three times without interruption, within a time limit).\n   *\n   * @private\n   * @param {KeyboardEvent} event - keyup event\n   */\n  handleKeypress(event) {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    // Detect if the 'Shift' key has been pressed. We want to only do things if it\n    // was pressed by itself and not in a combination with another keyâ€”so we keep\n    // track of whether the preceding keyup had shiftKey: true on it, and if it\n    // did, we ignore the next Shift keyup event.\n    //\n    // This works because using Shift as a modifier key (e.g. pressing Shift + A)\n    // will fire TWO keyup events, one for A (with e.shiftKey: true) and the other\n    // for Shift (with e.shiftKey: false).\n    if (\n      (event.key === 'Shift' || event.keyCode === 16 || event.which === 16) &&\n      !this.lastKeyWasModified\n    ) {\n      this.keypressCounter += 1\n\n      // Update the indicator before the below if statement can reset it back to 0\n      this.updateIndicator()\n\n      // Clear the timeout for the keypress timeout message clearing itself\n      if (this.timeoutMessageId) {\n        window.clearTimeout(this.timeoutMessageId)\n        this.timeoutMessageId = null\n      }\n\n      if (this.keypressCounter >= 3) {\n        this.keypressCounter = 0\n\n        if (this.keypressTimeoutId) {\n          window.clearTimeout(this.keypressTimeoutId)\n          this.keypressTimeoutId = null\n        }\n\n        this.exitPage()\n      } else {\n        if (this.keypressCounter === 1) {\n          this.$updateSpan.textContent = this.i18n.t('pressTwoMoreTimes')\n        } else {\n          this.$updateSpan.textContent = this.i18n.t('pressOneMoreTime')\n        }\n      }\n\n      this.setKeypressTimer()\n    } else if (this.keypressTimeoutId) {\n      // If the user pressed any key other than 'Shift', after having pressed\n      // 'Shift' and activating the timer, stop and reset the timer.\n      this.resetKeypressTimer()\n    }\n\n    // Keep track of whether the Shift modifier key was held during this keypress\n    this.lastKeyWasModified = event.shiftKey\n  }\n\n  /**\n   * Starts the 'quick escape' keyboard sequence timer.\n   *\n   * This can be invoked several times. We want this to be possible so that the\n   * timer is restarted each time the shortcut key is pressed (e.g. the user has\n   * up to n seconds between each keypress, rather than n seconds to invoke the\n   * entire sequence.)\n   *\n   * @private\n   */\n  setKeypressTimer() {\n    // Clear any existing timeout. This is so only one timer is running even if\n    // there are multiple keypresses in quick succession.\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    // Set a fresh timeout\n    this.keypressTimeoutId = window.setTimeout(\n      this.resetKeypressTimer.bind(this),\n      this.timeoutTime\n    )\n  }\n\n  /**\n   * Stops and resets the 'quick escape' keyboard sequence timer.\n   *\n   * @private\n   */\n  resetKeypressTimer() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n      this.keypressTimeoutId = null\n    }\n\n    const $updateSpan = this.$updateSpan\n\n    this.keypressCounter = 0\n    $updateSpan.textContent = this.i18n.t('timedOut')\n\n    this.timeoutMessageId = window.setTimeout(() => {\n      $updateSpan.textContent = ''\n    }, this.timeoutTime)\n\n    this.updateIndicator()\n  }\n\n  /**\n   * Reset the page using the EtP button\n   *\n   * We use this in situations where a user may re-enter a page using the browser\n   * back button. In these cases, the browser can choose to restore the state of\n   * the page as it was previously, including restoring the 'ghost page' overlay,\n   * the announcement span having it's role set to \"alert\" and the keypress\n   * indicator still active, leaving the page in an unusable state.\n   *\n   * By running this check when the page is shown, we can programatically restore\n   * the page and the component to a \"default\" state\n   *\n   * @private\n   */\n  resetPage() {\n    // If an overlay is set, remove it and reset the value\n    document.body.classList.remove('govuk-exit-this-page-hide-content')\n\n    if (this.$overlay) {\n      this.$overlay.remove()\n      this.$overlay = null\n    }\n\n    // Ensure the announcement span's role is status, not alert and clear any text\n    if (this.$updateSpan) {\n      this.$updateSpan.setAttribute('role', 'status')\n      this.$updateSpan.textContent = ''\n    }\n\n    // Sync the keypress indicator lights\n    this.updateIndicator()\n\n    // If the timeouts are active, clear them\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    if (this.timeoutMessageId) {\n      window.clearTimeout(this.timeoutMessageId)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-exit-this-page'\n\n  /**\n   * Exit this page default config\n   *\n   * @see {@link ExitThisPageConfig}\n   * @constant\n   * @type {ExitThisPageConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      activated: 'Loading.',\n      timedOut: 'Exit this page expired.',\n      pressTwoMoreTimes: 'Shift, press 2 more times to exit.',\n      pressOneMoreTime: 'Shift, press 1 more time to exit.'\n    }\n  })\n}\n\n/**\n * Exit this Page config\n *\n * @see {@link ExitThisPage.defaults}\n * @typedef {object} ExitThisPageConfig\n * @property {ExitThisPageTranslations} [i18n=ExitThisPage.defaults.i18n] - Exit this page translations\n */\n\n/**\n * Exit this Page translations\n *\n * @see {@link ExitThisPage.defaults.i18n}\n * @typedef {object} ExitThisPageTranslations\n *\n * Messages used by the component programatically inserted text, including\n * overlay text and screen reader announcements.\n * @property {string} [activated] - Screen reader announcement for when EtP\n *   keypress functionality has been successfully activated.\n * @property {string} [timedOut] - Screen reader announcement for when the EtP\n *   keypress functionality has timed out.\n * @property {string} [pressTwoMoreTimes] - Screen reader announcement informing\n *   the user they must press the activation key two more times.\n * @property {string} [pressOneMoreTime] - Screen reader announcement informing\n *   the user they must press the activation key one more time.\n */\n", "import { getBreakpoint } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Header component\n *\n * @preserve\n */\nexport class Header extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $menuButton\n\n  /** @private */\n  $menu\n\n  /**\n   * Save the opened/closed state for the nav in memory so that we can\n   * accurately maintain state when the screen is changed from small to big and\n   * back to small\n   *\n   * @private\n   */\n  menuIsOpen = false\n\n  /**\n   * A global const for storing a matchMedia instance which we'll use to detect\n   * when a screen size change happens. We rely on it being null if the feature\n   * isn't available to initially apply hidden attributes\n   *\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * Apply a matchMedia for desktop which will trigger a state sync if the\n   * browser viewport moves between states.\n   *\n   * @param {Element | null} $module - HTML element to use for header\n   */\n  constructor($module) {\n    super()\n\n    if (!$module) {\n      throw new ElementError({\n        componentName: 'Header',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n    const $menuButton = $module.querySelector('.govuk-js-header-toggle')\n\n    // Headers don't necessarily have a navigation. When they don't, the menu\n    // toggle won't be rendered by our macro (or may be omitted when writing\n    // plain HTML)\n    if (!$menuButton) {\n      return this\n    }\n\n    const menuId = $menuButton.getAttribute('aria-controls')\n    if (!menuId) {\n      throw new ElementError({\n        componentName: 'Header',\n        identifier:\n          'Navigation button (`<button class=\"govuk-js-header-toggle\">`) attribute (`aria-controls`)'\n      })\n    }\n\n    const $menu = document.getElementById(menuId)\n    if (!$menu) {\n      throw new ElementError({\n        componentName: 'Header',\n        element: $menu,\n        identifier: `Navigation (\\`<ul id=\"${menuId}\">\\`)`\n      })\n    }\n\n    this.$menu = $menu\n    this.$menuButton = $menuButton\n\n    this.setupResponsiveChecks()\n\n    this.$menuButton.addEventListener('click', () =>\n      this.handleMenuButtonClick()\n    )\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('desktop')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        componentName: 'Header',\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend desktop breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Sync menu state\n   *\n   * Uses the global variable menuIsOpen to correctly set the accessible and\n   * visual states of the menu and the menu button.\n   * Additionally will force the menu to be visible and the menu button to be\n   * hidden if the matchMedia is triggered to desktop.\n   *\n   * @private\n   */\n  checkMode() {\n    if (!this.mql || !this.$menu || !this.$menuButton) {\n      return\n    }\n\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden')\n      this.$menuButton.setAttribute('hidden', '')\n    } else {\n      this.$menuButton.removeAttribute('hidden')\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString())\n\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden')\n      } else {\n        this.$menu.setAttribute('hidden', '')\n      }\n    }\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   *\n   * @private\n   */\n  handleMenuButtonClick() {\n    this.menuIsOpen = !this.menuIsOpen\n    this.checkMode()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-header'\n}\n", "import { mergeConfigs, setFocus } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Notification Banner component\n *\n * @preserve\n */\nexport class NotificationBanner extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {NotificationBannerConfig}\n   */\n  config\n\n  /**\n   * @param {Element | null} $module - HTML element to use for notification banner\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Notification banner',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      NotificationBanner.defaults,\n      config,\n      normaliseDataset($module.dataset)\n    )\n\n    /**\n     * Focus the notification banner\n     *\n     * If `role=\"alert\"` is set, focus the element to help some assistive\n     * technologies prioritise announcing it.\n     *\n     * You can turn off the auto-focus functionality by setting\n     * `data-disable-auto-focus=\"true\"` in the component HTML. You might wish to\n     * do this based on user research findings, or to avoid a clash with another\n     * element which should be focused when the page loads.\n     */\n    if (\n      this.$module.getAttribute('role') === 'alert' &&\n      !this.config.disableAutoFocus\n    ) {\n      setFocus(this.$module)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-notification-banner'\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` â€“ in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n", "import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Radios component\n *\n * @preserve\n */\nexport class Radios extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $inputs\n\n  /**\n   * Radios can be associated with a 'conditionally revealed' content block â€“\n   * for example, a radio for 'Phone' could reveal an additional form field for\n   * the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the radio state.\n   *\n   * @param {Element | null} $module - HTML element to use for radios\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Radios',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $inputs = $module.querySelectorAll('input[type=\"radio\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        componentName: 'Radios',\n        identifier: 'Form inputs (`<input type=\"radio\">`)'\n      })\n    }\n\n    this.$module = $module\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          componentName: 'Radios',\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all radio buttons in this $module.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Radio input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target?.classList.contains('govuk-radios__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-radios__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the $module â€“ if the click occurred on a radio, sync\n   * the state of the conditional reveal for all radio buttons in the same form\n   * with the same name (because checking one radio could have un-checked a\n   * radio in another $module)\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't radio buttons\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'radio'\n    ) {\n      return\n    }\n\n    // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n    const $allInputs = document.querySelectorAll(\n      'input[type=\"radio\"][aria-controls]'\n    )\n\n    const $clickedInputForm = $clickedInput.form\n    const $clickedInputName = $clickedInput.name\n\n    $allInputs.forEach(($input) => {\n      const hasSameFormOwner = $input.form === $clickedInputForm\n      const hasSameName = $input.name === $clickedInputName\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input)\n      }\n    })\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-radios'\n}\n", "import { getFragmentFromUrl, setFocus } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Skip link component\n *\n * @preserve\n */\nexport class SkipLink extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @param {Element | null} $module - HTML element to use for skip link\n   * @throws {ElementError} when $module is not set or the wrong type\n   * @throws {ElementError} when $module.hash does not contain a hash\n   * @throws {ElementError} when the linked element is missing or the wrong type\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLAnchorElement)) {\n      throw new ElementError({\n        componentName: 'Skip link',\n        element: $module,\n        expectedType: 'HTMLAnchorElement',\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    const hash = this.$module.hash\n    const href = this.$module.getAttribute('href') ?? ''\n\n    /** @type {URL | undefined} */\n    let url\n\n    /**\n     * Check for valid link URL\n     *\n     * {@link https://caniuse.com/url}\n     * {@link https://url.spec.whatwg.org}\n     *\n     */\n    try {\n      url = new window.URL(this.$module.href)\n    } catch (error) {\n      throw new ElementError(\n        `Skip link: Target link (\\`href=\"${href}\"\\`) is invalid`\n      )\n    }\n\n    // Return early for external URLs or links to other pages\n    if (\n      url.origin !== window.location.origin ||\n      url.pathname !== window.location.pathname\n    ) {\n      return\n    }\n\n    const linkedElementId = getFragmentFromUrl(hash)\n\n    // Check link path matching current page\n    if (!linkedElementId) {\n      throw new ElementError(\n        `Skip link: Target link (\\`href=\"${href}\"\\`) has no hash fragment`\n      )\n    }\n\n    const $linkedElement = document.getElementById(linkedElementId)\n\n    // Check for link target element\n    if (!$linkedElement) {\n      throw new ElementError({\n        componentName: 'Skip link',\n        element: $linkedElement,\n        identifier: `Target content (\\`id=\"${linkedElementId}\"\\`)`\n      })\n    }\n\n    /**\n     * Focus the linked element on click\n     *\n     * Adds a helper CSS class to hide native focus styles,\n     * but removes it on blur to restore native focus styles\n     */\n    this.$module.addEventListener('click', () =>\n      setFocus($linkedElement, {\n        onBeforeFocus() {\n          $linkedElement.classList.add('govuk-skip-link-focused-element')\n        },\n        onBlur() {\n          $linkedElement.classList.remove('govuk-skip-link-focused-element')\n        }\n      })\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-skip-link'\n}\n", "import { getBreakpoint, getFragmentFromUrl } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Tabs component\n *\n * @preserve\n */\nexport class Tabs extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $tabs\n\n  /** @private */\n  $tabList\n\n  /** @private */\n  $tabListItems\n\n  /** @private */\n  keys = { left: 37, right: 39, up: 38, down: 40 }\n\n  /** @private */\n  jsHiddenClass = 'govuk-tabs__panel--hidden'\n\n  /** @private */\n  changingHash = false\n\n  /** @private */\n  boundTabClick\n\n  /** @private */\n  boundTabKeydown\n\n  /** @private */\n  boundOnHashChange\n\n  /**\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $module - HTML element to use for tabs\n   */\n  constructor($module) {\n    super()\n\n    if (!$module) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $tabs = $module.querySelectorAll('a.govuk-tabs__tab')\n    if (!$tabs.length) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        identifier: 'Links (`<a class=\"govuk-tabs__tab\">`)'\n      })\n    }\n\n    this.$module = $module\n    this.$tabs = $tabs\n\n    // Save bound functions so we can remove event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    const $tabList = this.$module.querySelector('.govuk-tabs__list')\n    const $tabListItems = this.$module.querySelectorAll(\n      'li.govuk-tabs__list-item'\n    )\n\n    if (!$tabList) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        identifier: 'List (`<ul class=\"govuk-tabs__list\">`)'\n      })\n    }\n\n    if (!$tabListItems.length) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        identifier: 'List items (`<li class=\"govuk-tabs__list-item\">`)'\n      })\n    }\n\n    this.$tabList = $tabList\n    this.$tabListItems = $tabListItems\n\n    this.setupResponsiveChecks()\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend tablet breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Setup or teardown handler for viewport resize check\n   *\n   * @private\n   */\n  checkMode() {\n    if (this.mql?.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  /**\n   * Setup tab component\n   *\n   * @private\n   */\n  setup() {\n    this.$tabList.setAttribute('role', 'tablist')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) ?? this.$tabs[0]\n\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Teardown tab component\n   *\n   * @private\n   */\n  teardown() {\n    this.$tabList.removeAttribute('role')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.removeAttribute('role')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Handle hashchange event\n   *\n   * @private\n   * @returns {void | undefined} Returns void, or undefined when prevented\n   */\n  onHashChange() {\n    const hash = window.location.hash\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  /**\n   * Hide panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hideTab($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  /**\n   * Show panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showTab($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  /**\n   * Get tab link by hash\n   *\n   * @private\n   * @param {string} hash - Hash fragment including #\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getTab(hash) {\n    return this.$module.querySelector(`a.govuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  /**\n   * Set tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  setAttributes($tab) {\n    const panelId = getFragmentFromUrl($tab.href)\n    if (!panelId) {\n      return\n    }\n\n    // Set tab attributes\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // Set panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unsetAttributes($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Handle tab link clicks\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {void} Returns void\n   */\n  onTabClick(event) {\n    const $currentTab = this.getCurrentTab()\n    const $nextTab = event.currentTarget\n\n    if (!$currentTab || !($nextTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    event.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Update browser URL hash fragment for tab\n   *\n   * - Allows back/forward to navigate tabs\n   * - Avoids page jump when hash changes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  createHistoryEntry($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    // Save and restore the id so the page doesn't jump when a user clicks a tab\n    // (which changes the hash)\n    const panelId = $panel.id\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = panelId\n    $panel.id = panelId\n  }\n\n  /**\n   * Handle tab keydown event\n   *\n   * - Press right/down arrow for next tab\n   * - Press left/up arrow for previous tab\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  onTabKeydown(event) {\n    switch (event.keyCode) {\n      case this.keys.left:\n      case this.keys.up:\n        this.activatePreviousTab()\n        event.preventDefault()\n        break\n      case this.keys.right:\n      case this.keys.down:\n        this.activateNextTab()\n        event.preventDefault()\n        break\n    }\n  }\n\n  /**\n   * Activate next tab\n   *\n   * @private\n   */\n  activateNextTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $nextTabListItem = $currentTab.parentElement.nextElementSibling\n    if (!$nextTabListItem) {\n      return\n    }\n\n    const $nextTab = $nextTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$nextTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    $nextTab.focus()\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Activate previous tab\n   *\n   * @private\n   */\n  activatePreviousTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $previousTabListItem =\n      $currentTab.parentElement.previousElementSibling\n    if (!$previousTabListItem) {\n      return\n    }\n\n    const $previousTab = $previousTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($previousTab)\n    $previousTab.focus()\n    this.createHistoryEntry($previousTab)\n  }\n\n  /**\n   * Get tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   * @returns {Element | null} Tab panel\n   */\n  getPanel($tab) {\n    const panelId = getFragmentFromUrl($tab.href)\n    if (!panelId) {\n      return null\n    }\n\n    return this.$module.querySelector(`#${panelId}`)\n  }\n\n  /**\n   * Show tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showPanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Hide tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hidePanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unhighlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentElement.classList.remove('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Set 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  highlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentElement.classList.add('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  /**\n   * Get current tab link\n   *\n   * @private\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getCurrentTab() {\n    return this.$module.querySelector(\n      '.govuk-tabs__list-item--selected a.govuk-tabs__tab'\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-tabs'\n}\n", "/* eslint-disable no-new */\n\nimport { version } from './common/govuk-frontend-version.mjs'\nimport { isSupported } from './common/index.mjs'\nimport { Accordion } from './components/accordion/accordion.mjs'\nimport { Button } from './components/button/button.mjs'\nimport { CharacterCount } from './components/character-count/character-count.mjs'\nimport { Checkboxes } from './components/checkboxes/checkboxes.mjs'\nimport { ErrorSummary } from './components/error-summary/error-summary.mjs'\nimport { ExitThisPage } from './components/exit-this-page/exit-this-page.mjs'\nimport { Header } from './components/header/header.mjs'\nimport { NotificationBanner } from './components/notification-banner/notification-banner.mjs'\nimport { Radios } from './components/radios/radios.mjs'\nimport { SkipLink } from './components/skip-link/skip-link.mjs'\nimport { Tabs } from './components/tabs/tabs.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Initialise all components\n *\n * Use the `data-module` attributes to find, instantiate and init all of the\n * components provided as part of GOV.UK Frontend.\n *\n * @param {Config & { scope?: Element }} [config] - Config for all components (with optional scope)\n */\nfunction initAll(config) {\n  config = typeof config !== 'undefined' ? config : {}\n\n  // Skip initialisation when GOV.UK Frontend is not supported\n  if (!isSupported()) {\n    console.log(new SupportError())\n    return\n  }\n\n  const components = /** @type {const} */ ([\n    [Accordion, config.accordion],\n    [Button, config.button],\n    [CharacterCount, config.characterCount],\n    [Checkboxes],\n    [ErrorSummary, config.errorSummary],\n    [ExitThisPage, config.exitThisPage],\n    [Header],\n    [NotificationBanner, config.notificationBanner],\n    [Radios],\n    [SkipLink],\n    [Tabs]\n  ])\n\n  // Allow the user to initialise GOV.UK Frontend in only certain sections of the page\n  // Defaults to the entire document if nothing is set.\n  const $scope = config.scope ?? document\n\n  components.forEach(([Component, config]) => {\n    const $elements = $scope.querySelectorAll(\n      `[data-module=\"${Component.moduleName}\"]`\n    )\n\n    $elements.forEach(($element) => {\n      try {\n        // Only pass config to components that accept it\n        'defaults' in Component\n          ? new Component($element, config)\n          : new Component($element)\n      } catch (error) {\n        console.log(error)\n      }\n    })\n  })\n}\n\nexport {\n  initAll,\n  version,\n\n  // Components\n  Accordion,\n  Button,\n  CharacterCount,\n  Checkboxes,\n  ErrorSummary,\n  ExitThisPage,\n  Header,\n  NotificationBanner,\n  Radios,\n  SkipLink,\n  Tabs\n}\n\n/**\n * Config for all components via `initAll()`\n *\n * @typedef {object} Config\n * @property {AccordionConfig} [accordion] - Accordion config\n * @property {ButtonConfig} [button] - Button config\n * @property {CharacterCountConfig} [characterCount] - Character Count config\n * @property {ErrorSummaryConfig} [errorSummary] - Error Summary config\n * @property {ExitThisPageConfig} [exitThisPage] - Exit This Page config\n * @property {NotificationBannerConfig} [notificationBanner] - Notification Banner config\n */\n\n/**\n * Config for individual components\n *\n * @typedef {import('./components/accordion/accordion.mjs').AccordionConfig} AccordionConfig\n * @typedef {import('./components/accordion/accordion.mjs').AccordionTranslations} AccordionTranslations\n * @typedef {import('./components/button/button.mjs').ButtonConfig} ButtonConfig\n * @typedef {import('./components/character-count/character-count.mjs').CharacterCountConfig} CharacterCountConfig\n * @typedef {import('./components/character-count/character-count.mjs').CharacterCountTranslations} CharacterCountTranslations\n * @typedef {import('./components/error-summary/error-summary.mjs').ErrorSummaryConfig} ErrorSummaryConfig\n * @typedef {import('./components/exit-this-page/exit-this-page.mjs').ExitThisPageConfig} ExitThisPageConfig\n * @typedef {import('./components/exit-this-page/exit-this-page.mjs').ExitThisPageTranslations} ExitThisPageTranslations\n * @typedef {import('./components/notification-banner/notification-banner.mjs').NotificationBannerConfig} NotificationBannerConfig\n */\n\n/**\n * Component config keys, e.g. `accordion` and `characterCount`\n *\n * @typedef {keyof Config} ConfigKey\n */\n", "import { initAll } from \"govuk-frontend\";\n\ninitAll();\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    var alreadyClicked = false;\n\n    onceClicked = (e) => {\n        if (alreadyClicked) {\n            e.preventDefault();\n            return false;\n        }\n        alreadyClicked = true;\n    };\n\n    const inputFileUpload = document.getElementsByClassName(\"upload-input\")[0];\n    if (inputFileUpload) {\n        const uploadFileButton = document.getElementsByClassName(\"upload-files-button\")[0];\n        if (uploadFileButton) {\n            const continueButton = document.getElementsByClassName(\"upload-continue-button\")[0];\n            inputFileUpload.addEventListener('change', (e) => {\n                if (continueButton) {\n                    continueButton.disabled = true;\n                }\n                inputFileUpload.form.submit();\n                inputFileUpload.disabled = true;\n            });\n\n            uploadFileButton.style.display = \"none\";\n        }\n    }\n\n    const filter_btn = document.getElementsByClassName(\"sau-filter-btn\")[0];\n    if (filter_btn) {\n        const filters = document.getElementsByClassName(\"sau-filter\");\n        if (filters) {\n            filter_btn.style.display = \"none\";\n            for (let idx = 0; idx < filters.length; idx++) {\n                filters[idx].addEventListener('change', (e) => {\n                    e.target.form.submit();\n                })                \n            }\n        }\n    }\n\n    const inputFormSelect = document.getElementsByClassName(\"sau-form-select\")[0];\n    if (inputFormSelect) {\n        const divOtherForm = document.getElementsByClassName(\"sau-other-form\")[0];\n        const divBudget = document.getElementsByClassName(\"sau-budget\")[0];\n        const divTaxAmount = document.getElementsByClassName(\"sau-tax-amount\")[0];\n        if (divOtherForm && divBudget && divTaxAmount) {\n            setDivs(inputFormSelect.value);\n            inputFormSelect.addEventListener('change', (e) => {\n                setDivs(e.target.value);\n            });\n\n            function setDivs(value) {\n                divOtherForm.style.display = value == \"other\" ? \"block\":\"none\"\n                divBudget.style.display = value == \"tax\" ? \"none\":\"block\"\n                divTaxAmount.style.display = value == \"tax\" ? \"block\":\"none\"\n            }\n        }\n    }\n\n    const inputTaxSelect = document.getElementsByClassName(\"sau-tax-select\")[0];\n    if (inputTaxSelect) {\n        const divTaxRange = document.getElementsByClassName(\"sau-tax-range\")[0];\n        if (inputTaxSelect) {\n            setTaxDivs(inputTaxSelect.value);\n            inputTaxSelect.addEventListener('change', (e) => {\n                setTaxDivs(e.target.value);\n            });\n\n            function setTaxDivs(value) {\n                divTaxRange.style.display = value == \"over_30000\" ? \"block\":\"none\"\n            }\n        }\n    }\n\n    const submissionButton = document.getElementsByClassName(\"sau-submission-button\")[0];\n    if (submissionButton) {\n        submissionButton.addEventListener('click', onceClicked);\n        addEventListener('pageshow', (e) => {\n            alreadyClicked = false;\n        });\n    }\n\n    const reportDueDate =  document.getElementsByClassName(\"sau-report-due\")[0];\n    if (reportDueDate) {\n        const warningText = document.getElementsByClassName(\"sau-date-warning\")[0];\n        if (warningText) {\n            const maxDate = new Date(reportDueDate.getAttribute(\"data-sau-max\"));\n            warningText.style.display = reportDueDate.value == \"\" || new Date(reportDueDate.value) <= maxDate ? \"none\" : \"block\";\n            reportDueDate.addEventListener('change', (e) => {\n                warningText.style.display = new Date(e.target.value) <= maxDate ?  \"none\" : \"block\";\n            });\n        }\n    }\n\n    const paOrg1Select = document.getElementsByClassName(\"pa-org-1-select\")[0];\n    if (paOrg1Select) {\n        const paOrg2Select = document.getElementsByClassName(\"pa-org-2-select\")[0];\n        const paOrg1 = document.getElementsByClassName(\"pa-org-1\")[0];\n        const paOrg2 = document.getElementsByClassName(\"pa-org-2\")[0];\n        if (paOrg1.value === \"\") {\n            document.getElementsByClassName(\"pa-org-1-fg\")[0].style.display = \"block\";\n            document.getElementsByClassName(\"pa-org-2-fg\")[0].style.display = \"block\";\n        }\n        else {\n            const paOrg2Select = document.getElementsByClassName(\"pa-org-2-select\")[0];\n            // Hide unrelated values\n            for (let index = 0; index < paOrg2Select.options.length; index++) {\n                const element = paOrg2Select.options[index];\n                if (element.parentElement.tagName === \"OPTGROUP\") {\n                    element.hidden = (element.parentElement.label !== paOrg1.value);\n                    element.parentElement.hidden = element.hidden;\n                    element.selected = !element.hidden && (element.label === paOrg2.value);\n                }\n            }\n            document.getElementsByClassName(\"pa-org-2-select-fg\")[0].style.display = \"block\";\n            if (paOrg2.value === \"\") {\n                document.getElementsByClassName(\"pa-org-2-fg\")[0].style.display = \"block\";\n            }\n        }\n\n\n        paOrg1Select.addEventListener('change', (e) => {\n            const paOrg1 = document.getElementsByClassName(\"pa-org-1\")[0];\n            const paOrg2 = document.getElementsByClassName(\"pa-org-2\")[0];\n            if (e.target.value === \"\") {\n                paOrg1.value = \"\";\n                paOrg2.value = \"\";\n                document.getElementsByClassName(\"pa-org-1-fg\")[0].style.display = \"block\";\n                document.getElementsByClassName(\"pa-org-2-fg\")[0].style.display = \"block\";\n                document.getElementsByClassName(\"pa-org-2-select-fg\")[0].style.display = \"none\";\n            }\n            else {\n                paOrg1.value = e.target.value;\n                document.getElementsByClassName(\"pa-org-1-fg\")[0].style.display = \"none\";\n                const paOrg2Select = document.getElementsByClassName(\"pa-org-2-select\")[0];\n                // Hide unrelated values\n                for (let index = 0; index < paOrg2Select.options.length; index++) {\n                    const element = paOrg2Select.options[index];\n                    if (element.parentElement.tagName === \"OPTGROUP\") {\n                        element.hidden = (element.parentElement.label !== e.target.value);\n                        element.parentElement.hidden = element.hidden;\n                        element.selected = !element.hidden && (element.label === paOrg2.value);\n                    }\n                }\n                const paOrg2SelectFg = document.getElementsByClassName(\"pa-org-2-select-fg\")[0].style.display = \"block\";\n                if (paOrg2Select.selectedOptions[0].value === \"\") {\n                    paOrg2.value = \"\";\n                    const paOrg2Fg = document.getElementsByClassName(\"pa-org-2-fg\")[0].style.display = \"block\";\n                }\n                else {\n                    const paOrg2Fg = document.getElementsByClassName(\"pa-org-2-fg\")[0].style.display = \"none\";\n                }\n            }\n        });\n\n        paOrg2Select.addEventListener('change', (e) => {\n            const paOrg2 = document.getElementsByClassName(\"pa-org-2\")[0];\n            if (e.target.value === \"\") {\n                paOrg2.value = \"\";\n                document.getElementsByClassName(\"pa-org-2-fg\")[0].style.display = \"block\";\n            }\n            else {\n                paOrg2.value = e.target.value;\n                document.getElementsByClassName(\"pa-org-2-fg\")[0].style.display = \"none\";\n            }\n        });\n    }\n});\n\n\n"],
  "mappings": ";AAmBO,SAASA,gBAAgBC,eAAe;AAW7C,WAASC,cAAcC,cAAc;AAGnC,UAAMC,kBAAkB,CAAA;AAWxB,aAASC,YAAYC,KAAKC,QAAQ;AAChC,iBAAW,CAACC,KAAKC,KAAK,KAAKC,OAAOC,QAAQL,GAAG,GAAG;AAC9C,cAAMM,cAAcL,SAAU,GAAEA,MAAO,IAAGC,GAAI,KAAIA;AAGlD,YAAIC,SAAS,OAAOA,UAAU,UAAU;AACtCJ,sBAAYI,OAAOG,WAAW;QAChC,OAAO;AAELR,0BAAgBQ,WAAW,IAAIH;QACjC;MACF;IACF;AAGAJ,gBAAYF,YAAY;AACxB,WAAOC;EACT;AAIA,QAAMS,wBAAwB,CAAA;AAG9B,aAAWV,gBAAgBF,eAAe;AACxC,UAAMK,MAAMJ,cAAcC,YAAY;AAItC,eAAW,CAACK,KAAKC,KAAK,KAAKC,OAAOC,QAAQL,GAAG,GAAG;AAC9CO,4BAAsBL,GAAG,IAAIC;IAC/B;EACF;AAEA,SAAOI;AACT;AAWO,SAASC,yBAAyBX,cAAcY,WAAW;AAEhE,QAAMC,YAAY,CAAA;AAElB,aAAW,CAACR,KAAKC,KAAK,KAAKC,OAAOC,QAAQR,YAAY,GAAG;AAEvD,UAAMc,WAAWT,IAAIU,MAAM,GAAG;AAG9B,QAAID,SAAS,CAAC,MAAMF,WAAW;AAG7B,UAAIE,SAASE,SAAS,GAAG;AACvBF,iBAASG,MAAK;MAChB;AAGA,YAAMC,SAASJ,SAASK,KAAK,GAAG;AAGhCN,gBAAUK,MAAM,IAAIZ;IACtB;EACF;AAEA,SAAOO;AACT;AAYO,SAASO,mBAAmBC,KAAK;AACtC,MAAI,CAACA,IAAIC,SAAS,GAAG,GAAG;AACtB,WAAOC;EACT;AAEA,SAAOF,IAAIN,MAAM,GAAG,EAAES,IAAG;AAC3B;AASO,SAASC,cAAcC,MAAM;AAClC,QAAMC,WAAY,+BAA8BD,IAAK;AAGrD,QAAMpB,QAAQsB,OACXC,iBAAiBC,SAASC,eAAe,EACzCC,iBAAiBL,QAAQ;AAE5B,SAAO;IACLA;IACArB,OAAOA,SAASiB;;AAEpB;AAeO,SAASU,SAASC,UAAUC,UAAU,CAAA,GAAI;AAAA,MAAAC;AAC/C,QAAMC,cAAcH,SAASI,aAAa,UAAU;AAEpD,MAAI,CAACD,aAAa;AAChBH,aAASK,aAAa,YAAY,IAAI;EACxC;AAKA,WAASC,UAAU;AACjBN,aAASO,iBAAiB,QAAQC,QAAQ;MAAEC,MAAM;IAAK,CAAC;EAC1D;AAKA,WAASD,SAAS;AAAA,QAAAE;AAChB,KAAAA,kBAAAT,QAAQO,WAARE,QAAAA,gBAAgBC,KAAKX,QAAQ;AAE7B,QAAI,CAACG,aAAa;AAChBH,eAASY,gBAAgB,UAAU;IACrC;EACF;AAGAZ,WAASO,iBAAiB,SAASD,SAAS;IAAEG,MAAM;EAAK,CAAC;AAG1D,GAAAP,wBAAAD,QAAQY,kBAARX,QAAAA,sBAAuBS,KAAKX,QAAQ;AACpCA,WAASc,MAAK;AAChB;AAYO,SAASC,YAAYC,SAASpB,SAASqB,MAAM;AAClD,MAAI,CAACD,QAAQ;AACX,WAAO;EACT;AAEA,SAAOA,OAAOE,UAAUC,SAAS,0BAA0B;AAC7D;AAUO,SAASC,eAAeC,QAAQC,QAAQ;AAC7C,QAAMC,mBAAmB,CAAA;AAGzB,aAAW,CAAC/B,MAAMgC,UAAU,KAAKnD,OAAOC,QAAQ+C,MAAM,GAAG;AACvD,UAAMI,SAAS,CAAA;AAGf,eAAW;MAAEC;MAAUC;SAAkBH,YAAY;AACnD,UAAI,CAACE,SAASE,MAAOzD,SAAQ,CAAC,CAACmD,OAAOnD,GAAG,CAAC,GAAG;AAC3CsD,eAAOI,KAAKF,YAAY;MAC1B;IACF;AAGA,QAAInC,SAAS,WAAW,EAAEgC,WAAW1C,SAAS2C,OAAO3C,UAAU,IAAI;AACjEyC,uBAAiBM,KAAK,GAAGJ,MAAM;IACjC;EACF;AAEA,SAAOF;AACT;;;AC1OO,SAASO,gBAAgBC,OAAO;AACrC,MAAI,OAAOA,UAAU,UAAU;AAC7B,WAAOA;EACT;AAEA,QAAMC,eAAeD,MAAME,KAAI;AAE/B,MAAID,iBAAiB,QAAQ;AAC3B,WAAO;EACT;AAEA,MAAIA,iBAAiB,SAAS;AAC5B,WAAO;EACT;AAIA,MAAIA,aAAaE,SAAS,KAAKC,SAASC,OAAOJ,YAAY,CAAC,GAAG;AAC7D,WAAOI,OAAOJ,YAAY;EAC5B;AAEA,SAAOD;AACT;AAWO,SAASM,iBAAiBC,SAAS;AAExC,QAAMC,MAAM,CAAA;AAEZ,aAAW,CAACC,KAAKT,KAAK,KAAKU,OAAOC,QAAQJ,OAAO,GAAG;AAClDC,QAAIC,GAAG,IAAIV,gBAAgBC,KAAK;EAClC;AAEA,SAAOQ;AACT;;;ACrCO,IAAMI,qBAAN,cAAiCC,MAAM;EAAAC,eAAAC,MAAA;AAAA,UAAA,GAAAA,IAAA;AAAA,SAC5CC,OAAO;EAAoB;AAC7B;AAKO,IAAMC,eAAN,cAA2BL,mBAAmB;;;;;;EAQnDE,YAAYI,SAASC,SAASC,MAAM;AAClC,UAAMC,iBACJ,cAAcC,kBAAkBC,YAC5B,mHACA;AAEN,UACEL,SACIG,iBACA,8DACN;AAAC,SAjBHL,OAAO;EAkBP;AACF;AAKO,IAAMQ,cAAN,cAA0BZ,mBAAmB;EAAAE,eAAAC,MAAA;AAAA,UAAA,GAAAA,IAAA;AAAA,SAClDC,OAAO;EAAa;AACtB;AAKO,IAAMS,eAAN,cAA2Bb,mBAAmB;EAmBnDE,YAAYY,kBAAkB;AAC5B,QAAIC,UAAU,OAAOD,qBAAqB,WAAWA,mBAAmB;AAGxE,QAAI,OAAOA,qBAAqB,UAAU;AACxC,YAAM;QAAEE;QAAeC;QAAYC;QAASC;MAAa,IACvDL;AAGFC,gBAAW,GAAEC,aAAc,KAAIC,UAAW;AAG1CF,iBAAWG,UACN,mBAAkBC,gBAAAA,OAAAA,eAAgB,aAAc,KACjD;IACN;AAEA,UAAMJ,OAAO;AAAC,SAnChBX,OAAO;EAoCP;AACF;;;ACtFO,IAAMgB,yBAAN,MAA6B;EAMlCC,cAAc;AACZ,SAAKC,aAAY;EACnB;EAQAA,eAAe;AACb,QAAI,CAACC,YAAW,GAAI;AAClB,YAAM,IAAIC,aAAY;IACxB;EACF;AACF;;;AC1BO,IAAMC,OAAN,MAAMA,MAAK;EAUhBC,YAAYC,eAAe,CAAA,GAAIC,SAAS,CAAA,GAAI;AAAA,QAAAC;AAAA,SAT5CF,eAAY;AAAA,SACZG,SAAM;AAUJ,SAAKH,eAAeA;AAGpB,SAAKG,UAAMD,iBAAGD,OAAOE,WAAMD,OAAAA,iBAAKE,SAASC,gBAAgBC,QAAQ;EACnE;EAaAC,EAAEC,WAAWC,SAAS;AACpB,QAAI,CAACD,WAAW;AAEd,YAAM,IAAIE,MAAM,0BAA0B;IAC5C;AAKA,QAAI,QAAOD,WAAAA,OAAAA,SAAAA,QAASE,WAAU,UAAU;AAEtCH,kBAAa,GAAEA,SAAU,IAAG,KAAKI,gBAC/BJ,WACAC,QAAQE,KACV,CAAE;IACJ;AAGA,UAAME,oBAAoB,KAAKb,aAAaQ,SAAS;AAErD,QAAI,OAAOK,sBAAsB,UAAU;AAEzC,UAAIA,kBAAkBC,MAAM,WAAW,GAAG;AACxC,YAAI,CAACL,SAAS;AACZ,gBAAM,IAAIC,MACR,wEACF;QACF;AAEA,eAAO,KAAKK,oBAAoBF,mBAAmBJ,OAAO;MAC5D;AAEA,aAAOI;IACT;AAIA,WAAOL;EACT;EAWAO,oBAAoBF,mBAAmBJ,SAAS;AAC9C,UAAMO,YAAYC,KAAKC,aAAaC,mBAAmB,KAAKhB,MAAM,EAAEiB,SAChE,IAAIH,KAAKC,aAAa,KAAKf,MAAM,IACjCkB;AAEJ,WAAOR,kBAAkBS,QACvB,cAUA,SAAUC,uBAAuBC,gBAAgB;AAC/C,UAAIC,OAAOC,UAAUC,eAAeC,KAAKnB,SAASe,cAAc,GAAG;AACjE,cAAMK,mBAAmBpB,QAAQe,cAAc;AAI/C,YACEK,qBAAqB,SACpB,OAAOA,qBAAqB,YAC3B,OAAOA,qBAAqB,UAC9B;AACA,iBAAO;QACT;AAGA,YAAI,OAAOA,qBAAqB,UAAU;AACxC,iBAAOb,YACHA,UAAUc,OAAOD,gBAAgB,IAChC,GAAEA,gBAAiB;QAC1B;AAEA,eAAOA;MACT;AAEA,YAAM,IAAInB,MACP,kCAAiCa,qBAAsB,wBAC1D;IACF,CACF;EACF;EAcAQ,4BAA4B;AAC1B,WAAOC,QACL,iBAAiBC,OAAOhB,QACtBA,KAAKiB,YAAYf,mBAAmB,KAAKhB,MAAM,EAAEiB,MACrD;EACF;EAkBAR,gBAAgBJ,WAAWG,OAAO;AAKhCA,YAAQwB,OAAOxB,KAAK;AACpB,QAAI,CAACyB,SAASzB,KAAK,GAAG;AACpB,aAAO;IACT;AAKA,UAAM0B,gBAAgB,KAAKN,0BAAyB,IAChD,IAAId,KAAKiB,YAAY,KAAK/B,MAAM,EAAEmC,OAAO3B,KAAK,IAC9C,KAAK4B,mCAAmC5B,KAAK;AAGjD,QAAK,GAAEH,SAAU,IAAG6B,aAAc,MAAK,KAAKrC,cAAc;AACxD,aAAOqC;eAGG,GAAE7B,SAAU,YAAW,KAAKR,cAAc;AACpDwC,cAAQC,KACL,+BAA8BJ,aAAc,UAAS,KAAKlC,MAAO,qCACpE;AAEA,aAAO;IACT;AAGA,UAAM,IAAIO,MACP,+CAA8C,KAAKP,MAAO,UAC7D;EACF;EAYAoC,mCAAmC5B,OAAO;AAGxCA,YAAQ+B,KAAKC,IAAID,KAAKE,MAAMjC,KAAK,CAAC;AAElC,UAAMkC,UAAU,KAAKC,wBAAuB;AAE5C,QAAID,SAAS;AACX,aAAO/C,MAAKiD,YAAYF,OAAO,EAAElC,KAAK;IACxC;AAEA,WAAO;EACT;EAcAmC,0BAA0B;AACxB,UAAME,cAAc,KAAK7C,OAAO8C,MAAM,GAAG,EAAE,CAAC;AAI5C,eAAWC,cAAcpD,MAAKqD,gBAAgB;AAC5C,YAAMC,YAAYtD,MAAKqD,eAAeD,UAAU;AAChD,UAAIE,UAAUC,SAAS,KAAKlD,MAAM,KAAKiD,UAAUC,SAASL,WAAW,GAAG;AACtE,eAAOE;MACT;IACF;EACF;AA6LF;AAhbapD,KAsRJqD,iBAAiB;EACtBG,QAAQ,CAAC,IAAI;EACbC,SAAS,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;EAC9DC,QAAQ,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;EACvDC,QAAQ,CACN,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,IAAI;EAENC,OAAO,CAAC,IAAI;EACZC,SAAS,CAAC,MAAM,IAAI;EACpBC,UAAU,CAAC,IAAI;EACfC,SAAS,CAAC,SAAS,MAAM,IAAI;EAC7BC,OAAO,CAAC,IAAI;AACd;AAzTWhE,KAyUJiD,cAAc;EACnBO,OAAOS,GAAG;AACR,QAAIA,MAAM,GAAG;AACX,aAAO;IACT;AACA,QAAIA,MAAM,GAAG;AACX,aAAO;IACT;AACA,QAAIA,MAAM,GAAG;AACX,aAAO;IACT;AACA,QAAIA,IAAI,OAAO,KAAKA,IAAI,OAAO,IAAI;AACjC,aAAO;IACT;AACA,QAAIA,IAAI,OAAO,MAAMA,IAAI,OAAO,IAAI;AAClC,aAAO;IACT;AACA,WAAO;;EAETR,UAAU;AACR,WAAO;;EAETC,OAAOO,GAAG;AACR,WAAOA,MAAM,KAAKA,MAAM,IAAI,QAAQ;;EAEtCN,OAAOM,GAAG;AACR,WAAOA,MAAM,IAAI,QAAQ;;EAE3BL,MAAMK,GAAG;AACP,QAAIA,MAAM,GAAG;AACX,aAAO;IACT;AACA,QAAIA,MAAM,GAAG;AACX,aAAO;IACT;AACA,QAAIA,KAAK,KAAKA,KAAK,GAAG;AACpB,aAAO;IACT;AACA,QAAIA,KAAK,KAAKA,KAAK,IAAI;AACrB,aAAO;IACT;AACA,WAAO;;EAETJ,QAAQI,GAAG;AACT,UAAMC,UAAUD,IAAI;AACpB,UAAME,OAAOD,UAAU;AACvB,QAAIC,SAAS,KAAKD,YAAY,IAAI;AAChC,aAAO;IACT;AACA,QAAIC,QAAQ,KAAKA,QAAQ,KAAK,EAAED,WAAW,MAAMA,WAAW,KAAK;AAC/D,aAAO;IACT;AACA,QACEC,SAAS,KACRA,QAAQ,KAAKA,QAAQ,KACrBD,WAAW,MAAMA,WAAW,IAC7B;AACA,aAAO;IACT;AAGA,WAAO;;EAETJ,SAASG,GAAG;AACV,QAAIA,MAAM,KAAKA,MAAM,IAAI;AACvB,aAAO;IACT;AACA,QAAIA,MAAM,KAAKA,MAAM,IAAI;AACvB,aAAO;IACT;AACA,QAAKA,KAAK,KAAKA,KAAK,MAAQA,KAAK,MAAMA,KAAK,IAAK;AAC/C,aAAO;IACT;AACA,WAAO;;EAETF,QAAQE,GAAG;AACT,QAAIA,MAAM,GAAG;AACX,aAAO;IACT;AACA,QAAIA,IAAI,QAAY,KAAKA,MAAM,GAAG;AAChC,aAAO;IACT;AACA,WAAO;;EAETD,MAAMC,GAAG;AACP,QAAIA,MAAM,GAAG;AACX,aAAO;IACT;AACA,QAAIA,MAAM,GAAG;AACX,aAAO;IACT;AACA,QAAIA,MAAM,GAAG;AACX,aAAO;IACT;AACA,QAAIA,MAAM,GAAG;AACX,aAAO;IACT;AACA,QAAIA,MAAM,GAAG;AACX,aAAO;IACT;AACA,WAAO;EACT;AACF;;;ACjaK,IAAMG,YAAN,MAAMA,mBAAkBC,uBAAuB;;;;;EAkGpDC,YAAYC,SAASC,SAAS,CAAA,GAAI;AAChC,UAAK;AAAE,SAjGTD,UAAO;AAAA,SAMPC,SAAM;AAAA,SAGNC,OAAI;AAAA,SAGJC,gBAAgB;AAA2B,SAG3CC,eAAe;AAA2B,SAG1CC,mBAAmB;AAAgC,SAGnDC,eAAe;AAA0B,SAGzCC,uBAAuB;AAAoC,SAG3DC,qBAAqB;AAAiC,SAGtDC,qBAAqB;AAAiC,SAGtDC,sBAAsB;AAAkC,SAGxDC,6BAA6B;AAA0C,SAGvEC,0BAA0B;AAAuC,SAGjEC,+BAA+B;AAA6C,SAG5EC,6BAA6B;AAAiC,SAG9DC,kCAAkC;AAAuC,SAGzEC,2BAA2B;AAAsC,SAGjEC,qBAAqB;AAA8B,SAGnDC,uBAAuB;AAAoC,SAG3DC,sBAAsB;AAAkC,SAGxDC,2BAA2B;AAAwC,SAGnEC,sBAAsB;AAAkC,SAGxDC,YAAS;AAAA,SAGTC,gCAAgC;AAAK,SAMrCC,iBAAiB;AAAI,SAMrBC,eAAe;AAAI,SAMnBC,eAAe;AASb,QAAI,EAAE1B,mBAAmB2B,cAAc;AACrC,YAAM,IAAIC,aAAa;QACrBC,eAAe;QACfC,SAAS9B;QACT+B,YAAY;MACd,CAAC;IACH;AAEA,SAAK/B,UAAUA;AAEf,SAAKC,SAAS+B,aACZnC,WAAUoC,UACVhC,QACAiC,iBAAiBlC,QAAQmC,OAAO,CAClC;AAEA,SAAKjC,OAAO,IAAIkC,KAAKC,yBAAyB,KAAKpC,QAAQ,MAAM,CAAC;AAElE,UAAMqB,YAAY,KAAKtB,QAAQsC,iBAAkB,IAAG,KAAKhC,YAAa,EAAC;AACvE,QAAI,CAACgB,UAAUiB,QAAQ;AACrB,YAAM,IAAIX,aAAa;QACrBC,eAAe;QACfE,YAAa,2BAA0B,KAAKzB,YAAa;MAC3D,CAAC;IACH;AAEA,SAAKgB,YAAYA;AACjB,SAAKC,gCAAgCiB,OAAOC,uBAAsB;AAElE,SAAKC,aAAY;AACjB,SAAKC,mBAAkB;AAGvB,UAAMC,qBAAqB,KAAKC,uBAAsB;AACtD,SAAKC,oBAAoBF,kBAAkB;EAC7C;EAOAF,eAAe;AAEb,SAAKlB,iBAAiBuB,SAASC,cAAc,QAAQ;AACrD,SAAKxB,eAAeyB,aAAa,QAAQ,QAAQ;AACjD,SAAKzB,eAAeyB,aAAa,SAAS,KAAK7C,YAAY;AAC3D,SAAKoB,eAAeyB,aAAa,iBAAiB,OAAO;AAGzD,SAAKxB,eAAesB,SAASC,cAAc,MAAM;AACjD,SAAKvB,aAAayB,UAAUC,IAAI,KAAKlC,kBAAkB;AACvD,SAAKO,eAAe4B,YAAY,KAAK3B,YAAY;AAGjD,UAAM4B,qBAAqBN,SAASC,cAAc,KAAK;AACvDK,uBAAmBJ,aAAa,SAAS,KAAK9C,aAAa;AAC3DkD,uBAAmBD,YAAY,KAAK5B,cAAc;AAClD,SAAKxB,QAAQsD,aAAaD,oBAAoB,KAAKrD,QAAQuD,UAAU;AAGrE,SAAK7B,eAAeqB,SAASC,cAAc,MAAM;AACjD,SAAKtB,aAAawB,UAAUC,IAAI,KAAK9C,gBAAgB;AACrD,SAAKmB,eAAe4B,YAAY,KAAK1B,YAAY;AAGjD,SAAKF,eAAegC,iBAAiB,SAAS,MAC5C,KAAKC,sBAAqB,CAC5B;AAGA,QAAI,mBAAmBV,UAAU;AAC/BA,eAASS,iBAAiB,eAAgBE,WACxC,KAAKC,cAAcD,KAAK,CAC1B;IACF;EACF;EAOAf,qBAAqB;AACnB,SAAKrB,UAAUsC,QAAQ,CAACC,UAAUC,MAAM;AACtC,YAAMC,UAAUF,SAASG,cAAe,IAAG,KAAKvD,kBAAmB,EAAC;AACpE,UAAI,CAACsD,SAAS;AACZ,cAAM,IAAInC,aAAa;UACrBC,eAAe;UACfE,YAAa,kCAAiC,KAAKtB,kBAAmB;QACxE,CAAC;MACH;AAGA,WAAKwD,sBAAsBF,SAASD,CAAC;AACrC,WAAKI,YAAY,KAAKC,WAAWN,QAAQ,GAAGA,QAAQ;AAGpDE,cAAQP,iBAAiB,SAAS,MAAM,KAAKY,gBAAgBP,QAAQ,CAAC;AAItE,WAAKQ,gBAAgBR,QAAQ;IAC/B,CAAC;EACH;EASAI,sBAAsBF,SAASO,OAAO;AACpC,UAAMC,QAAQR,QAAQC,cAAe,IAAG,KAAKxD,kBAAmB,EAAC;AACjE,UAAMgE,WAAWT,QAAQC,cAAe,IAAG,KAAKtD,mBAAoB,EAAC;AACrE,UAAM+D,WAAWV,QAAQC,cAAe,IAAG,KAAK7C,mBAAoB,EAAC;AAErE,QAAI,CAACqD,UAAU;AACb,YAAM,IAAI5C,aAAa;QACrBC,eAAe;QACfE,YAAa,uBAAsB,KAAKrB,mBAAoB;MAC9D,CAAC;IACH;AAEA,QAAI,CAAC6D,OAAO;AACV,YAAM,IAAI3C,aAAa;QACrBC,eAAe;QACfE,YAAa,8CAA6C,KAAKvB,kBAAmB;MACpF,CAAC;IACH;AAIA,UAAMkE,UAAU3B,SAASC,cAAc,QAAQ;AAC/C0B,YAAQzB,aAAa,QAAQ,QAAQ;AACrCyB,YAAQzB,aACN,iBACC,GAAE,KAAKjD,QAAQ2E,EAAG,YAAWL,QAAQ,CAAE,EAC1C;AAIA,eAAWM,QAAQC,MAAMC,KAAKP,MAAMQ,UAAU,GAAG;AAC/C,UAAIH,KAAKI,aAAa,MAAM;AAC1BN,gBAAQzB,aAAa2B,KAAKI,UAAW,GAAEJ,KAAKK,SAAU,EAAC;MACzD;IACF;AAGA,UAAMC,eAAenC,SAASC,cAAc,MAAM;AAClDkC,iBAAahC,UAAUC,IAAI,KAAKvC,uBAAuB;AAGvDsE,iBAAaP,KAAKJ,MAAMI;AAIxB,UAAMQ,oBAAoBpC,SAASC,cAAc,MAAM;AACvDmC,sBAAkBjC,UAAUC,IAAI,KAAKtC,4BAA4B;AACjEqE,iBAAa9B,YAAY+B,iBAAiB;AAG1CA,sBAAkBC,YAAYb,MAAMa;AAGpC,UAAMC,kBAAkBtC,SAASC,cAAc,MAAM;AACrDqC,oBAAgBnC,UAAUC,IAAI,KAAKrC,0BAA0B;AAI7DuE,oBAAgBpC,aAAa,kBAAkB,EAAE;AAEjD,UAAMqC,uBAAuBvC,SAASC,cAAc,MAAM;AAC1DsC,yBAAqBpC,UAAUC,IAAI,KAAKpC,+BAA+B;AACvEsE,oBAAgBjC,YAAYkC,oBAAoB;AAEhD,UAAMC,gBAAgBxC,SAASC,cAAc,MAAM;AACnD,UAAMwC,gBAAgBzC,SAASC,cAAc,MAAM;AACnDwC,kBAActC,UAAUC,IAAI,KAAKlC,kBAAkB;AACnDqE,yBAAqBlC,YAAYoC,aAAa;AAC9CD,kBAAcrC,UAAUC,IAAI,KAAKnC,wBAAwB;AACzDsE,yBAAqBlC,YAAYmC,aAAa;AAO9Cb,YAAQtB,YAAY8B,YAAY;AAChCR,YAAQtB,YAAY,KAAKqC,uBAAsB,CAAE;AAGjD,QAAIhB,YAAQ,QAARA,SAAUiB,YAAY;AAKxB,YAAMC,eAAe5C,SAASC,cAAc,MAAM;AAGlD,YAAM4C,oBAAoB7C,SAASC,cAAc,MAAM;AACvD4C,wBAAkB1C,UAAUC,IAAI,KAAK/B,wBAAwB;AAC7DuE,mBAAavC,YAAYwC,iBAAiB;AAG1C,iBAAWhB,QAAQC,MAAMC,KAAKL,SAASM,UAAU,GAAG;AAClDY,qBAAa1C,aAAa2B,KAAKI,UAAW,GAAEJ,KAAKK,SAAU,EAAC;MAC9D;AAGAW,wBAAkBR,YAAYX,SAASW;AAGvCX,eAASiB,WAAWG,aAAaF,cAAclB,QAAQ;AAEvDC,cAAQtB,YAAYuC,YAAY;AAChCjB,cAAQtB,YAAY,KAAKqC,uBAAsB,CAAE;IACnD;AAEAf,YAAQtB,YAAYiC,eAAe;AAEnCb,aAASsB,YAAYvB,KAAK;AAC1BC,aAASpB,YAAYsB,OAAO;EAC9B;EAQAf,cAAcD,OAAO;AACnB,UAAMqC,YAAYrC,MAAMsC;AAGxB,QAAI,EAAED,qBAAqBE,UAAU;AACnC;IACF;AAGA,UAAMpC,WAAWkC,UAAUG,QAAS,IAAG,KAAK5F,YAAa,EAAC;AAC1D,QAAIuD,UAAU;AACZ,WAAKK,YAAY,MAAML,QAAQ;IACjC;EACF;EAQAO,gBAAgBP,UAAU;AACxB,UAAMsC,WAAW,KAAKhC,WAAWN,QAAQ;AACzC,SAAKK,YAAY,CAACiC,UAAUtC,QAAQ;AAGpC,SAAKuC,WAAWvC,QAAQ;EAC1B;EAOAJ,wBAAwB;AACtB,UAAM4C,cAAc,CAAC,KAAKxD,uBAAsB;AAEhD,SAAKvB,UAAUsC,QAASC,cAAa;AACnC,WAAKK,YAAYmC,aAAaxC,QAAQ;AACtC,WAAKuC,WAAWvC,QAAQ;IAC1B,CAAC;AAED,SAAKf,oBAAoBuD,WAAW;EACtC;EASAnC,YAAYiC,UAAUtC,UAAU;AAC9B,UAAM2B,gBAAgB3B,SAASG,cAAe,IAAG,KAAK/C,kBAAmB,EAAC;AAC1E,UAAMsE,gBAAgB1B,SAASG,cAC5B,IAAG,KAAKhD,wBAAyB,EACpC;AACA,UAAM0D,UAAUb,SAASG,cAAe,IAAG,KAAKxD,kBAAmB,EAAC;AACpE,UAAM8F,WAAWzC,SAASG,cAAe,IAAG,KAAK3C,mBAAoB,EAAC;AAEtE,QAAI,CAACiF,UAAU;AACb,YAAM,IAAI1E,aAAa;QACrBC,eAAe;QACfE,YAAa,kCAAiC,KAAKV,mBAAoB;MACzE,CAAC;IACH;AAEA,QAAI,CAACmE,iBAAiB,CAACD,iBAAiB,CAACb,SAAS;AAEhD;IACF;AAEA,UAAM6B,gBAAgBJ,WAClB,KAAKjG,KAAKsG,EAAE,aAAa,IACzB,KAAKtG,KAAKsG,EAAE,aAAa;AAE7BjB,kBAAckB,cAAcF;AAC5B7B,YAAQzB,aAAa,iBAAkB,GAAEkD,QAAS,EAAC;AAGnD,UAAMO,iBAAiB,CAAA;AAEvB,UAAMxB,eAAerB,SAASG,cAC3B,IAAG,KAAKpD,uBAAwB,EACnC;AACA,QAAIsE,cAAc;AAChBwB,qBAAeC,KAAM,GAAEzB,aAAauB,WAAY,GAAEG,KAAI,CAAE;IAC1D;AAEA,UAAMnC,WAAWZ,SAASG,cAAe,IAAG,KAAK7C,mBAAoB,EAAC;AACtE,QAAIsD,UAAU;AACZiC,qBAAeC,KAAM,GAAElC,SAASgC,WAAY,GAAEG,KAAI,CAAE;IACtD;AAEA,UAAMC,mBAAmBV,WACrB,KAAKjG,KAAKsG,EAAE,sBAAsB,IAClC,KAAKtG,KAAKsG,EAAE,sBAAsB;AACtCE,mBAAeC,KAAKE,gBAAgB;AAOpCnC,YAAQzB,aAAa,cAAcyD,eAAeI,KAAK,KAAK,CAAC;AAG7D,QAAIX,UAAU;AACZG,eAASS,gBAAgB,QAAQ;AACjClD,eAASX,UAAUC,IAAI,KAAK5C,oBAAoB;AAChDiF,oBAActC,UAAU8D,OAAO,KAAK9F,oBAAoB;IAC1D,OAAO;AACLoF,eAASrD,aAAa,UAAU,aAAa;AAC7CY,eAASX,UAAU8D,OAAO,KAAKzG,oBAAoB;AACnDiF,oBAActC,UAAUC,IAAI,KAAKjC,oBAAoB;IACvD;AAGA,UAAM0B,qBAAqB,KAAKC,uBAAsB;AACtD,SAAKC,oBAAoBF,kBAAkB;EAC7C;EASAuB,WAAWN,UAAU;AACnB,WAAOA,SAASX,UAAU+D,SAAS,KAAK1G,oBAAoB;EAC9D;EAQAsC,yBAAyB;AACvB,UAAMqE,gBAAgB,KAAK5F,UAAUiB;AACrC,UAAM4E,uBAAuB,KAAKnH,QAAQsC,iBACvC,IAAG,KAAK/B,oBAAqB,EAChC,EAAEgC;AACF,UAAMK,qBAAqBsE,kBAAkBC;AAE7C,WAAOvE;EACT;EAQAE,oBAAoBqD,UAAU;AAC5B,QAAI,CAAC,KAAK3E,kBAAkB,CAAC,KAAKE,gBAAgB,CAAC,KAAKD,cAAc;AACpE;IACF;AAEA,SAAKD,eAAeyB,aAAa,iBAAiBkD,SAASiB,SAAQ,CAAE;AACrE,SAAK1F,aAAa+E,cAAcN,WAC5B,KAAKjG,KAAKsG,EAAE,iBAAiB,IAC7B,KAAKtG,KAAKsG,EAAE,iBAAiB;AACjC,SAAK/E,aAAayB,UAAUmE,OAAO,KAAKnG,sBAAsB,CAACiF,QAAQ;EACzE;EAQAC,WAAWvC,UAAU;AACnB,QAAI,KAAKtC,iCAAiC,KAAKtB,OAAOqH,kBAAkB;AAItE,YAAM5C,UAAUb,SAASG,cAAe,IAAG,KAAKxD,kBAAmB,EAAC;AAEpE,UAAIkE,SAAS;AACX,cAAM6C,YAAY7C,QAAQ8C,aAAa,eAAe;AACtD,cAAMC,eAAe/C,QAAQ8C,aAAa,eAAe;AAIzD,YAAID,aAAaE,cAAc;AAC7BC,iBAAOC,eAAeC,QAAQL,WAAWE,YAAY;QACvD;MACF;IACF;EACF;EAQApD,gBAAgBR,UAAU;AACxB,QAAI,KAAKtC,iCAAiC,KAAKtB,OAAOqH,kBAAkB;AACtE,YAAM5C,UAAUb,SAASG,cAAe,IAAG,KAAKxD,kBAAmB,EAAC;AAEpE,UAAIkE,SAAS;AACX,cAAM6C,YAAY7C,QAAQ8C,aAAa,eAAe;AACtD,cAAMC,eAAeF,YACjBG,OAAOC,eAAeE,QAAQN,SAAS,IACvC;AAEJ,YAAIE,iBAAiB,MAAM;AACzB,eAAKvD,YAAYuD,iBAAiB,QAAQ5D,QAAQ;QACpD;MACF;IACF;EACF;EAaA4B,yBAAyB;AACvB,UAAMqC,iBAAiB/E,SAASC,cAAc,MAAM;AACpD8E,mBAAe5E,UAAUC,IACvB,yBACA,KAAKxC,0BACP;AACAmH,mBAAe1C,YAAY;AAC3B,WAAO0C;EACT;AAyBF;AAjlBajI,UA6jBJkI,aAAa;AA7jBTlI,UAskBJoC,WAAW+F,OAAOC,OAAO;EAC9B/H,MAAM;IACJgI,iBAAiB;IACjBC,aAAa;IACbC,sBAAsB;IACtBC,iBAAiB;IACjBC,aAAa;IACbC,sBAAsB;;EAExBjB,kBAAkB;AACpB,CAAC;AAGH,IAAM9E,SAAS;;;;;;EAMbC,wBAAwB,WAAY;AAClC,UAAM+F,aAAa;AACnB,QAAIC;AACJ,QAAI;AACFf,aAAOC,eAAeC,QAAQY,YAAYA,UAAU;AACpDC,eACEf,OAAOC,eAAeE,QAAQW,UAAU,MAAMA,WAAWpB,SAAQ;AACnEM,aAAOC,eAAee,WAAWF,UAAU;AAC3C,aAAOC;aACAE,WAAW;AAClB,aAAO;IACT;EACF;AACF;;;ACrnBA,IAAMC,YAAY;AAClB,IAAMC,8BAA8B;AAO7B,IAAMC,SAAN,MAAMA,gBAAeC,uBAAuB;;;;;EAoBjDC,YAAYC,SAASC,SAAS,CAAA,GAAI;AAChC,UAAK;AAAE,SAnBTD,UAAO;AAAA,SAMPC,SAAM;AAAA,SAMNC,0BAA0B;AASxB,QAAI,EAAEF,mBAAmBG,cAAc;AACrC,YAAM,IAAIC,aAAa;QACrBC,eAAe;QACfC,SAASN;QACTO,YAAY;MACd,CAAC;IACH;AAEA,SAAKP,UAAUA;AAEf,SAAKC,SAASO,aACZX,QAAOY,UACPR,QACAS,iBAAiBV,QAAQW,OAAO,CAClC;AAEA,SAAKX,QAAQY,iBAAiB,WAAYC,WACxC,KAAKC,cAAcD,KAAK,CAC1B;AACA,SAAKb,QAAQY,iBAAiB,SAAUC,WAAU,KAAKE,SAASF,KAAK,CAAC;EACxE;EAcAC,cAAcD,OAAO;AACnB,UAAMG,UAAUH,MAAMI;AAGtB,QAAIJ,MAAMK,YAAYvB,WAAW;AAC/B;IACF;AAGA,QACEqB,mBAAmBb,eACnBa,QAAQG,aAAa,MAAM,MAAM,UACjC;AACAN,YAAMO,eAAc;AACpBJ,cAAQK,MAAK;IACf;EACF;EAaAN,SAASF,OAAO;AAEd,QAAI,CAAC,KAAKZ,OAAOqB,oBAAoB;AACnC;IACF;AAGA,QAAI,KAAKpB,yBAAyB;AAChCW,YAAMO,eAAc;AACpB,aAAO;IACT;AAEA,SAAKlB,0BAA0BqB,OAAOC,WAAW,MAAM;AACrD,WAAKtB,0BAA0B;IACjC,GAAGN,8BAA8B,GAAI;EACvC;AAiBF;AAtHaC,OA0GJ4B,aAAa;AA1GT5B,OAmHJY,WAAWiB,OAAOC,OAAO;EAC9BL,oBAAoB;AACtB,CAAC;;;AC1HI,SAASM,sBAAsBC,UAAUC,eAAe;AAC7D,QAAMC,+BAA+BF,SAASG,QAAS,IAAGF,aAAc,GAAE;AAC1E,SAAOC,+BACHA,6BAA6BE,aAAaH,aAAa,IACvD;AACN;;;ACUO,IAAMI,iBAAN,MAAMA,wBAAuBC,uBAAuB;;;;;EA4CzDC,YAAYC,SAASC,SAAS,CAAA,GAAI;AAAA,QAAAC,MAAAC;AAChC,UAAK;AAAE,SA3CTH,UAAO;AAAA,SAGPI,YAAS;AAAA,SAGTC,uBAAoB;AAAA,SAGpBC,4BAAyB;AAAA,SAMzBC,qBAAqB;AAAI,SAGzBC,iBAAiB;AAAE,SAMnBC,eAAe;AAAI,SAMnBR,SAAM;AAAA,SAGNS,OAAI;AAAA,SAGJC,YAAS;AASP,QAAI,EAAEX,mBAAmBY,cAAc;AACrC,YAAM,IAAIC,aAAa;QACrBC,eAAe;QACfC,SAASf;QACTgB,YAAY;MACd,CAAC;IACH;AAEA,UAAMZ,YAAYJ,QAAQiB,cAAc,2BAA2B;AACnE,QACE,EACEb,qBAAqBc,uBACrBd,qBAAqBe,mBAEvB;AACA,YAAM,IAAIN,aAAa;QACrBC,eAAe;QACfC,SAASX;QACTgB,cAAc;QACdJ,YAAY;MACd,CAAC;IACH;AAGA,UAAMK,gBAAgBC,iBAAiBtB,QAAQuB,OAAO;AAStD,QAAIC,kBAAkB,CAAA;AACtB,QAAI,cAAcH,iBAAiB,eAAeA,eAAe;AAC/DG,wBAAkB;QAChBC,WAAWC;QACXC,UAAUD;;IAEd;AAEA,SAAKzB,SAAS2B,aACZ/B,gBAAegC,UACf5B,QACAuB,iBACAH,aACF;AAGA,UAAMS,SAASC,eAAelC,gBAAemC,QAAQ,KAAK/B,MAAM;AAChE,QAAI6B,OAAO,CAAC,GAAG;AACb,YAAM,IAAIG,YAAa,oBAAmBH,OAAO,CAAC,CAAE,EAAC;IACvD;AAEA,SAAKpB,OAAO,IAAIwB,KAAKC,yBAAyB,KAAKlC,QAAQ,MAAM,GAAG;MAElEmC,QAAQC,sBAAsBrC,SAAS,MAAM;IAC/C,CAAC;AAGD,SAAKW,aAAST,QAAAC,wBAAG,KAAKF,OAAO0B,aAAQxB,OAAAA,wBAAI,KAAKF,OAAOwB,cAAS,OAAAvB,OAAIoC;AAElE,SAAKtC,UAAUA;AACf,SAAKI,YAAYA;AAEjB,UAAMmC,wBAAyB,GAAE,KAAKnC,UAAUoC,EAAG;AACnD,UAAMC,uBAAuBC,SAASC,eAAeJ,qBAAqB;AAC1E,QAAI,CAACE,sBAAsB;AACzB,YAAM,IAAI5B,aAAa;QACrBC,eAAe;QACfC,SAAS0B;QACTzB,YAAa,wBAAuBuB,qBAAsB;MAC5D,CAAC;IACH;AAKA,QAAK,GAAEE,qBAAqBG,WAAY,GAAEC,MAAM,OAAO,GAAG;AACxDJ,2BAAqBG,cAAc,KAAKlC,KAAKoC,EAAE,uBAAuB;QACpEC,OAAO,KAAKpC;MACd,CAAC;IACH;AAIA,SAAKP,UAAU4C,sBAAsB,YAAYP,oBAAoB;AAIrE,UAAMnC,4BAA4BoC,SAASO,cAAc,KAAK;AAC9D3C,8BAA0B4C,YACxB;AACF5C,8BAA0B6C,aAAa,aAAa,QAAQ;AAC5D,SAAK7C,4BAA4BA;AACjCmC,yBAAqBO,sBACnB,YACA1C,yBACF;AAKA,UAAMD,uBAAuBqC,SAASO,cAAc,KAAK;AACzD5C,yBAAqB6C,YAAYT,qBAAqBS;AACtD7C,yBAAqB+C,UAAUC,IAAI,+BAA+B;AAClEhD,yBAAqB8C,aAAa,eAAe,MAAM;AACvD,SAAK9C,uBAAuBA;AAC5BoC,yBAAqBO,sBAAsB,YAAY3C,oBAAoB;AAG3EoC,yBAAqBW,UAAUC,IAAI,uBAAuB;AAG1D,SAAKjD,UAAUkD,gBAAgB,WAAW;AAE1C,SAAKC,iBAAgB;AAKrBC,WAAOC,iBAAiB,YAAY,MAAM,KAAKC,mBAAkB,CAAE;AAKnE,SAAKA,mBAAkB;EACzB;EAUAH,mBAAmB;AACjB,SAAKnD,UAAUqD,iBAAiB,SAAS,MAAM,KAAKE,YAAW,CAAE;AAGjE,SAAKvD,UAAUqD,iBAAiB,SAAS,MAAM,KAAKG,YAAW,CAAE;AACjE,SAAKxD,UAAUqD,iBAAiB,QAAQ,MAAM,KAAKI,WAAU,CAAE;EACjE;EAUAF,cAAc;AACZ,SAAKG,0BAAyB;AAC9B,SAAKvD,qBAAqBwD,KAAKC,IAAG;EACpC;EAiBAJ,cAAc;AACZ,SAAKnD,eAAe+C,OAAOS,YAAY,MAAM;AAC3C,UACE,CAAC,KAAK1D,sBACNwD,KAAKC,IAAG,IAAK,OAAO,KAAKzD,oBACzB;AACA,aAAK2D,qBAAoB;MAC3B;OACC,GAAI;EACT;EASAL,aAAa;AAEX,QAAI,KAAKpD,cAAc;AACrB+C,aAAOW,cAAc,KAAK1D,YAAY;IACxC;EACF;EAOAyD,uBAAuB;AACrB,QAAI,KAAK9D,UAAUgE,UAAU,KAAK5D,gBAAgB;AAChD,WAAKA,iBAAiB,KAAKJ,UAAUgE;AACrC,WAAKV,mBAAkB;IACzB;EACF;EAUAA,qBAAqB;AACnB,SAAKI,0BAAyB;AAC9B,SAAKO,+BAA8B;EACrC;EAOAP,4BAA4B;AAC1B,UAAMQ,kBAAkB,KAAK3D,YAAY,KAAKoC,MAAM,KAAK3C,UAAUgE,KAAK;AACxE,UAAMG,UAAUD,kBAAkB;AAIlC,SAAKjE,qBAAqB+C,UAAUoB,OAClC,4CACA,CAAC,KAAKC,gBAAe,CACvB;AAGA,SAAKrE,UAAUgD,UAAUoB,OAAO,yBAAyBD,OAAO;AAChE,SAAKlE,qBAAqB+C,UAAUoB,OAAO,uBAAuBD,OAAO;AACzE,SAAKlE,qBAAqB+C,UAAUoB,OAAO,cAAc,CAACD,OAAO;AAGjE,SAAKlE,qBAAqBuC,cAAc,KAAK8B,gBAAe;EAC9D;EAOAL,iCAAiC;AAG/B,QAAI,KAAKI,gBAAe,GAAI;AAC1B,WAAKnE,0BAA0BgD,gBAAgB,aAAa;IAC9D,OAAO;AACL,WAAKhD,0BAA0B6C,aAAa,eAAe,MAAM;IACnE;AAGA,SAAK7C,0BAA0BsC,cAAc,KAAK8B,gBAAe;EACnE;EAUA3B,MAAM4B,MAAM;AACV,QAAI,KAAK1E,OAAO0B,UAAU;AAAA,UAAAiD;AACxB,YAAMC,UAAMD,cAAGD,KAAK9B,MAAM,MAAM,MAAC+B,OAAAA,cAAI,CAAA;AACrC,aAAOC,OAAOC;IAChB;AAEA,WAAOH,KAAKG;EACd;EAQAJ,kBAAkB;AAChB,UAAMJ,kBAAkB,KAAK3D,YAAY,KAAKoC,MAAM,KAAK3C,UAAUgE,KAAK;AACxE,UAAMW,YAAY,KAAK9E,OAAO0B,WAAW,UAAU;AACnD,WAAO,KAAKqD,mBAAmBV,iBAAiBS,SAAS;EAC3D;EAWAC,mBAAmBV,iBAAiBS,WAAW;AAC7C,QAAIT,oBAAoB,GAAG;AACzB,aAAO,KAAK5D,KAAKoC,EAAG,GAAEiC,SAAU,SAAQ;IAC1C;AAEA,UAAME,uBACJX,kBAAkB,IAAI,cAAc;AAEtC,WAAO,KAAK5D,KAAKoC,EAAG,GAAEiC,SAAU,GAAEE,oBAAqB,IAAG;MACxDlC,OAAOmC,KAAKC,IAAIb,eAAe;IACjC,CAAC;EACH;EAaAG,kBAAkB;AAEhB,QAAI,CAAC,KAAKxE,OAAOmF,WAAW;AAC1B,aAAO;IACT;AAGA,UAAMC,gBAAgB,KAAKtC,MAAM,KAAK3C,UAAUgE,KAAK;AACrD,UAAMzD,YAAY,KAAKA;AAEvB,UAAM2E,iBAAkB3E,YAAY,KAAKV,OAAOmF,YAAa;AAE7D,WAAOE,kBAAkBD;EAC3B;AA6DF;AAjcaxF,eAyYJ0F,aAAa;AAzYT1F,eAkZJgC,WAAW2D,OAAOC,OAAO;EAC9BL,WAAW;EACX1E,MAAM;IAEJgF,sBAAsB;MACpBC,KAAK;MACLC,OAAO;;IAETC,mBAAmB;IACnBC,qBAAqB;MACnBH,KAAK;MACLC,OAAO;;IAGTG,iBAAiB;MACfJ,KAAK;MACLC,OAAO;;IAETI,cAAc;IACdC,gBAAgB;MACdN,KAAK;MACLC,OAAO;;IAETM,qBAAqB;MACnBN,OAAO;IACT;EACF;AACF,CAAC;AA7aU/F,eAqbJmC,SAASwD,OAAOC,OAAO;EAC5BU,OAAO,CACL;IACEC,UAAU,CAAC,UAAU;IACrBC,cAAc;EAChB,GACA;IACED,UAAU,CAAC,WAAW;IACtBC,cAAc;GACf;AAEL,CAAC;;;AC/cI,IAAMC,aAAN,cAAyBC,uBAAuB;;;;;;;;;;;;;;;EAqBrDC,YAAYC,SAAS;AACnB,UAAK;AAAE,SApBTA,UAAO;AAAA,SAGPC,UAAO;AAmBL,QAAI,EAAED,mBAAmBE,cAAc;AACrC,YAAM,IAAIC,aAAa;QACrBC,eAAe;QACfC,SAASL;QACTM,YAAY;MACd,CAAC;IACH;AAEA,UAAML,UAAUD,QAAQO,iBAAiB,wBAAwB;AACjE,QAAI,CAACN,QAAQO,QAAQ;AACnB,YAAM,IAAIL,aAAa;QACrBC,eAAe;QACfE,YAAY;MACd,CAAC;IACH;AAEA,SAAKN,UAAUA;AACf,SAAKC,UAAUA;AAEf,SAAKA,QAAQQ,QAASC,YAAW;AAC/B,YAAMC,WAAWD,OAAOE,aAAa,oBAAoB;AAGzD,UAAI,CAACD,UAAU;AACb;MACF;AAGA,UAAI,CAACE,SAASC,eAAeH,QAAQ,GAAG;AACtC,cAAM,IAAIR,aAAa;UACrBC,eAAe;UACfE,YAAa,6BAA4BK,QAAS;QACpD,CAAC;MACH;AAIAD,aAAOK,aAAa,iBAAiBJ,QAAQ;AAC7CD,aAAOM,gBAAgB,oBAAoB;IAC7C,CAAC;AAKDC,WAAOC,iBAAiB,YAAY,MAAM,KAAKC,0BAAyB,CAAE;AAK1E,SAAKA,0BAAyB;AAG9B,SAAKnB,QAAQkB,iBAAiB,SAAUE,WAAU,KAAKC,YAAYD,KAAK,CAAC;EAC3E;EAOAD,4BAA4B;AAC1B,SAAKlB,QAAQQ,QAASC,YACpB,KAAKY,oCAAoCZ,MAAM,CACjD;EACF;EAWAY,oCAAoCZ,QAAQ;AAC1C,UAAMC,WAAWD,OAAOE,aAAa,eAAe;AACpD,QAAI,CAACD,UAAU;AACb;IACF;AAEA,UAAMY,UAAUV,SAASC,eAAeH,QAAQ;AAChD,QACEY,WACAA,QAAQC,UAAUC,SAAS,+BAA+B,GAC1D;AACA,YAAMC,iBAAiBhB,OAAOiB;AAE9BjB,aAAOK,aAAa,iBAAiBW,eAAeE,SAAQ,CAAE;AAC9DL,cAAQC,UAAUK,OAChB,yCACA,CAACH,cACH;IACF;EACF;EAWAI,uBAAuBpB,QAAQ;AAC7B,UAAMqB,wBAAwBlB,SAASN,iBACpC,gCAA+BG,OAAOsB,IAAK,IAC9C;AAEAD,0BAAsBtB,QAASwB,wBAAuB;AACpD,YAAMC,mBAAmBxB,OAAOyB,SAASF,mBAAmBE;AAC5D,UAAID,oBAAoBD,uBAAuBvB,QAAQ;AACrDuB,2BAAmBN,UAAU;AAC7B,aAAKL,oCAAoCW,kBAAkB;MAC7D;IACF,CAAC;EACH;EAYAG,uBAAuB1B,QAAQ;AAC7B,UAAM2B,6CACJxB,SAASN,iBACN,4DAA2DG,OAAOsB,IAAK,IAC1E;AAEFK,+CAA2C5B,QAAS6B,qBAAoB;AACtE,YAAMJ,mBAAmBxB,OAAOyB,SAASG,gBAAgBH;AACzD,UAAID,kBAAkB;AACpBI,wBAAgBX,UAAU;AAC1B,aAAKL,oCAAoCgB,eAAe;MAC1D;IACF,CAAC;EACH;EAYAjB,YAAYD,OAAO;AACjB,UAAMmB,gBAAgBnB,MAAMoB;AAG5B,QACE,EAAED,yBAAyBE,qBAC3BF,cAAcG,SAAS,YACvB;AACA;IACF;AAGA,UAAMC,kBAAkBJ,cAAc3B,aAAa,eAAe;AAClE,QAAI+B,iBAAiB;AACnB,WAAKrB,oCAAoCiB,aAAa;IACxD;AAGA,QAAI,CAACA,cAAcZ,SAAS;AAC1B;IACF;AAGA,UAAMiB,wBACJL,cAAc3B,aAAa,gBAAgB,MAAM;AACnD,QAAIgC,uBAAuB;AACzB,WAAKd,uBAAuBS,aAAa;IAC3C,OAAO;AACL,WAAKH,uBAAuBG,aAAa;IAC3C;EACF;AAMF;AAtNa1C,WAqNJgD,aAAa;;;AC5Mf,IAAMC,eAAN,MAAMA,sBAAqBC,uBAAuB;;;;;EAcvDC,YAAYC,SAASC,SAAS,CAAA,GAAI;AAChC,UAAK;AAAE,SAbTD,UAAO;AAAA,SAMPC,SAAM;AASJ,QAAI,EAAED,mBAAmBE,cAAc;AACrC,YAAM,IAAIC,aAAa;QACrBC,eAAe;QACfC,SAASL;QACTM,YAAY;MACd,CAAC;IACH;AAEA,SAAKN,UAAUA;AAEf,SAAKC,SAASM,aACZV,cAAaW,UACbP,QACAQ,iBAAiBT,QAAQU,OAAO,CAClC;AAKA,QAAI,CAAC,KAAKT,OAAOU,kBAAkB;AACjCC,eAAS,KAAKZ,OAAO;IACvB;AAEA,SAAKA,QAAQa,iBAAiB,SAAUC,WAAU,KAAKC,YAAYD,KAAK,CAAC;EAC3E;EAQAC,YAAYD,OAAO;AACjB,UAAME,UAAUF,MAAMG;AACtB,QAAID,WAAW,KAAKE,YAAYF,OAAO,GAAG;AACxCF,YAAMK,eAAc;IACtB;EACF;EAqBAD,YAAYF,SAAS;AAEnB,QAAI,EAAEA,mBAAmBI,oBAAoB;AAC3C,aAAO;IACT;AAEA,UAAMC,UAAUC,mBAAmBN,QAAQO,IAAI;AAC/C,QAAI,CAACF,SAAS;AACZ,aAAO;IACT;AAEA,UAAMG,SAASC,SAASC,eAAeL,OAAO;AAC9C,QAAI,CAACG,QAAQ;AACX,aAAO;IACT;AAEA,UAAMG,iBAAiB,KAAKC,2BAA2BJ,MAAM;AAC7D,QAAI,CAACG,gBAAgB;AACnB,aAAO;IACT;AAKAA,mBAAeE,eAAc;AAC7BL,WAAOM,MAAM;MAAEC,eAAe;IAAK,CAAC;AAEpC,WAAO;EACT;EAkBAH,2BAA2BJ,QAAQ;AAAA,QAAAQ;AACjC,UAAMC,YAAYT,OAAOU,QAAQ,UAAU;AAE3C,QAAID,WAAW;AACb,YAAME,WAAWF,UAAUG,qBAAqB,QAAQ;AAExD,UAAID,SAASE,QAAQ;AACnB,cAAMC,mBAAmBH,SAAS,CAAC;AAInC,YACEX,kBAAkBe,qBACjBf,OAAOgB,SAAS,cAAchB,OAAOgB,SAAS,UAC/C;AACA,iBAAOF;QACT;AAQA,cAAMG,YAAYH,iBAAiBI,sBAAqB,EAAGC;AAC3D,cAAMC,YAAYpB,OAAOkB,sBAAqB;AAI9C,YAAIE,UAAUC,UAAUC,OAAOC,aAAa;AAC1C,gBAAMC,cAAcJ,UAAUD,MAAMC,UAAUC;AAE9C,cAAIG,cAAcP,YAAYK,OAAOC,cAAc,GAAG;AACpD,mBAAOT;UACT;QACF;MACF;IACF;AAEA,YAAAN,wBACEP,SAASwB,cAAe,cAAazB,OAAO0B,aAAa,IAAI,CAAE,IAAG,MAAC,OAAAlB,wBACnER,OAAOU,QAAQ,OAAO;EAE1B;AAiBF;AArLarC,aAyKJsD,aAAa;AAzKTtD,aAkLJW,WAAW4C,OAAOC,OAAO;EAC9B1C,kBAAkB;AACpB,CAAC;;;AC1LI,IAAM2C,eAAN,MAAMA,sBAAqBC,uBAAuB;;;;;EAqEvDC,YAAYC,SAASC,SAAS,CAAA,GAAI;AAChC,UAAK;AAAE,SApETD,UAAO;AAAA,SAMPC,SAAM;AAAA,SAGNC,OAAI;AAAA,SAGJC,UAAO;AAAA,SAMPC,kBAAkB;AAAI,SAMtBC,cAAc;AAAI,SAMlBC,sBAAsB;AAAI,SAM1BC,WAAW;AAAI,SAGfC,kBAAkB;AAAC,SAGnBC,qBAAqB;AAAK,SAG1BC,cAAc;AAAI,SAUlBC,oBAAoB;AAAI,SAMxBC,mBAAmB;AASjB,QAAI,EAAEZ,mBAAmBa,cAAc;AACrC,YAAM,IAAIC,aAAa;QACrBC,eAAe;QACfC,SAAShB;QACTiB,YAAY;MACd,CAAC;IACH;AAEA,UAAMd,UAAUH,QAAQkB,cAAc,+BAA+B;AACrE,QAAI,EAAEf,mBAAmBgB,oBAAoB;AAC3C,YAAM,IAAIL,aAAa;QACrBC,eAAe;QACfC,SAASb;QACTiB,cAAc;QACdH,YAAY;MACd,CAAC;IACH;AAEA,SAAKhB,SAASoB,aACZxB,cAAayB,UACbrB,QACAsB,iBAAiBvB,QAAQwB,OAAO,CAClC;AAEA,SAAKtB,OAAO,IAAIuB,KAAKC,yBAAyB,KAAKzB,QAAQ,MAAM,CAAC;AAClE,SAAKD,UAAUA;AACf,SAAKG,UAAUA;AAEf,UAAMC,kBAAkBuB,SAAST,cAC/B,mCACF;AACA,QAAId,2BAA2Be,mBAAmB;AAChD,WAAKf,kBAAkBA;IACzB;AAEA,SAAKwB,eAAc;AACnB,SAAKC,eAAc;AACnB,SAAKC,uBAAsB;AAG3B,QAAI,EAAE,uCAAuCH,SAASI,KAAKP,UAAU;AACnEG,eAASK,iBAAiB,SAAS,KAAKC,eAAeC,KAAK,IAAI,GAAG,IAAI;AACvEP,eAASI,KAAKP,QAAQW,oCAAoC;IAC5D;AAKAC,WAAOJ,iBAAiB,YAAY,KAAKK,UAAUH,KAAK,IAAI,CAAC;EAC/D;EAOAL,iBAAiB;AACf,SAAKxB,cAAcsB,SAASW,cAAc,MAAM;AAChD,SAAKjC,YAAYkC,aAAa,QAAQ,QAAQ;AAC9C,SAAKlC,YAAYmC,YAAY;AAE7B,SAAKxC,QAAQyC,YAAY,KAAKpC,WAAW;EAC3C;EAOAyB,yBAAyB;AAEvB,SAAK3B,QAAQ6B,iBAAiB,SAAS,KAAKU,YAAYR,KAAK,IAAI,CAAC;AAGlE,QAAI,KAAK9B,iBAAiB;AACxB,WAAKA,gBAAgB4B,iBACnB,SACA,KAAKU,YAAYR,KAAK,IAAI,CAC5B;IACF;EACF;EAOAN,iBAAiB;AAGf,SAAKtB,sBAAsBqB,SAASW,cAAc,KAAK;AACvD,SAAKhC,oBAAoBkC,YAAY;AACrC,SAAKlC,oBAAoBiC,aAAa,eAAe,MAAM;AAG3D,aAASI,IAAI,GAAGA,IAAI,GAAGA,KAAK;AAC1B,YAAMC,aAAajB,SAASW,cAAc,KAAK;AAC/CM,iBAAWJ,YAAY;AACvB,WAAKlC,oBAAoBmC,YAAYG,UAAU;IACjD;AAGA,SAAKzC,QAAQsC,YAAY,KAAKnC,mBAAmB;EACnD;EAQAuC,kBAAkB;AAChB,QAAI,CAAC,KAAKvC,qBAAqB;AAC7B;IACF;AAGA,SAAKA,oBAAoBwC,UAAUC,OACjC,4CACA,KAAKvC,kBAAkB,CACzB;AAGA,UAAMwC,cAAc,KAAK1C,oBAAoB2C,iBAC3C,wCACF;AACAD,gBAAYE,QAAQ,CAACN,YAAYO,UAAU;AACzCP,iBAAWE,UAAUC,OACnB,6CACAI,QAAQ,KAAK3C,eACf;IACF,CAAC;EACH;EAUA4C,WAAW;AACT,QAAI,CAAC,KAAK/C,aAAa;AACrB;IACF;AAEA,SAAKA,YAAYgD,cAAc;AAM/B1B,aAASI,KAAKe,UAAUQ,IAAI,mCAAmC;AAC/D,SAAK/C,WAAWoB,SAASW,cAAc,KAAK;AAC5C,SAAK/B,SAASiC,YAAY;AAC1B,SAAKjC,SAASgC,aAAa,QAAQ,OAAO;AAK1CZ,aAASI,KAAKU,YAAY,KAAKlC,QAAQ;AACvC,SAAKA,SAAS8C,cAAc,KAAKnD,KAAKqD,EAAE,WAAW;AAEnDnB,WAAOoB,SAASC,OAAO,KAAKtD,QAAQsD;EACtC;EAaAf,YAAYgB,OAAO;AACjBA,UAAMC,eAAc;AACpB,SAAKP,SAAQ;EACf;EASAnB,eAAeyB,OAAO;AACpB,QAAI,CAAC,KAAKrD,aAAa;AACrB;IACF;AAUA,SACGqD,MAAME,QAAQ,WAAWF,MAAMG,YAAY,MAAMH,MAAMI,UAAU,OAClE,CAAC,KAAKrD,oBACN;AACA,WAAKD,mBAAmB;AAGxB,WAAKqC,gBAAe;AAGpB,UAAI,KAAKjC,kBAAkB;AACzBwB,eAAO2B,aAAa,KAAKnD,gBAAgB;AACzC,aAAKA,mBAAmB;MAC1B;AAEA,UAAI,KAAKJ,mBAAmB,GAAG;AAC7B,aAAKA,kBAAkB;AAEvB,YAAI,KAAKG,mBAAmB;AAC1ByB,iBAAO2B,aAAa,KAAKpD,iBAAiB;AAC1C,eAAKA,oBAAoB;QAC3B;AAEA,aAAKyC,SAAQ;MACf,OAAO;AACL,YAAI,KAAK5C,oBAAoB,GAAG;AAC9B,eAAKH,YAAYgD,cAAc,KAAKnD,KAAKqD,EAAE,mBAAmB;QAChE,OAAO;AACL,eAAKlD,YAAYgD,cAAc,KAAKnD,KAAKqD,EAAE,kBAAkB;QAC/D;MACF;AAEA,WAAKS,iBAAgB;IACvB,WAAW,KAAKrD,mBAAmB;AAGjC,WAAKsD,mBAAkB;IACzB;AAGA,SAAKxD,qBAAqBiD,MAAMQ;EAClC;EAYAF,mBAAmB;AAGjB,QAAI,KAAKrD,mBAAmB;AAC1ByB,aAAO2B,aAAa,KAAKpD,iBAAiB;IAC5C;AAGA,SAAKA,oBAAoByB,OAAO+B,WAC9B,KAAKF,mBAAmB/B,KAAK,IAAI,GACjC,KAAKxB,WACP;EACF;EAOAuD,qBAAqB;AACnB,QAAI,CAAC,KAAK5D,aAAa;AACrB;IACF;AAEA,QAAI,KAAKM,mBAAmB;AAC1ByB,aAAO2B,aAAa,KAAKpD,iBAAiB;AAC1C,WAAKA,oBAAoB;IAC3B;AAEA,UAAMN,cAAc,KAAKA;AAEzB,SAAKG,kBAAkB;AACvBH,gBAAYgD,cAAc,KAAKnD,KAAKqD,EAAE,UAAU;AAEhD,SAAK3C,mBAAmBwB,OAAO+B,WAAW,MAAM;AAC9C9D,kBAAYgD,cAAc;IAC5B,GAAG,KAAK3C,WAAW;AAEnB,SAAKmC,gBAAe;EACtB;EAgBAR,YAAY;AAEVV,aAASI,KAAKe,UAAUsB,OAAO,mCAAmC;AAElE,QAAI,KAAK7D,UAAU;AACjB,WAAKA,SAAS6D,OAAM;AACpB,WAAK7D,WAAW;IAClB;AAGA,QAAI,KAAKF,aAAa;AACpB,WAAKA,YAAYkC,aAAa,QAAQ,QAAQ;AAC9C,WAAKlC,YAAYgD,cAAc;IACjC;AAGA,SAAKR,gBAAe;AAGpB,QAAI,KAAKlC,mBAAmB;AAC1ByB,aAAO2B,aAAa,KAAKpD,iBAAiB;IAC5C;AAEA,QAAI,KAAKC,kBAAkB;AACzBwB,aAAO2B,aAAa,KAAKnD,gBAAgB;IAC3C;EACF;AAsBF;AA/aaf,aA8ZJwE,aAAa;AA9ZTxE,aAuaJyB,WAAWgD,OAAOC,OAAO;EAC9BrE,MAAM;IACJsE,WAAW;IACXC,UAAU;IACVC,mBAAmB;IACnBC,kBAAkB;EACpB;AACF,CAAC;;;AChbI,IAAMC,SAAN,cAAqBC,uBAAuB;;;;;;;EAmCjDC,YAAYC,SAAS;AACnB,UAAK;AAAE,SAlCTA,UAAO;AAAA,SAGPC,cAAW;AAAA,SAGXC,QAAK;AAAA,SASLC,aAAa;AAAK,SAUlBC,MAAM;AAWJ,QAAI,CAACJ,SAAS;AACZ,YAAM,IAAIK,aAAa;QACrBC,eAAe;QACfC,SAASP;QACTQ,YAAY;MACd,CAAC;IACH;AAEA,SAAKR,UAAUA;AACf,UAAMC,cAAcD,QAAQS,cAAc,yBAAyB;AAKnE,QAAI,CAACR,aAAa;AAChB,aAAO;IACT;AAEA,UAAMS,SAAST,YAAYU,aAAa,eAAe;AACvD,QAAI,CAACD,QAAQ;AACX,YAAM,IAAIL,aAAa;QACrBC,eAAe;QACfE,YACE;MACJ,CAAC;IACH;AAEA,UAAMN,QAAQU,SAASC,eAAeH,MAAM;AAC5C,QAAI,CAACR,OAAO;AACV,YAAM,IAAIG,aAAa;QACrBC,eAAe;QACfC,SAASL;QACTM,YAAa,yBAAwBE,MAAO;MAC9C,CAAC;IACH;AAEA,SAAKR,QAAQA;AACb,SAAKD,cAAcA;AAEnB,SAAKa,sBAAqB;AAE1B,SAAKb,YAAYc,iBAAiB,SAAS,MACzC,KAAKC,sBAAqB,CAC5B;EACF;EAOAF,wBAAwB;AACtB,UAAMG,aAAaC,cAAc,SAAS;AAE1C,QAAI,CAACD,WAAWE,OAAO;AACrB,YAAM,IAAId,aAAa;QACrBC,eAAe;QACfE,YAAa,0BAAyBS,WAAWG,QAAS;MAC5D,CAAC;IACH;AAGA,SAAKhB,MAAMiB,OAAOC,WAAY,eAAcL,WAAWE,KAAM,GAAE;AAI/D,QAAI,sBAAsB,KAAKf,KAAK;AAClC,WAAKA,IAAIW,iBAAiB,UAAU,MAAM,KAAKQ,UAAS,CAAE;IAC5D,OAAO;AAGL,WAAKnB,IAAIoB,YAAY,MAAM,KAAKD,UAAS,CAAE;IAC7C;AAEA,SAAKA,UAAS;EAChB;EAYAA,YAAY;AACV,QAAI,CAAC,KAAKnB,OAAO,CAAC,KAAKF,SAAS,CAAC,KAAKD,aAAa;AACjD;IACF;AAEA,QAAI,KAAKG,IAAIqB,SAAS;AACpB,WAAKvB,MAAMwB,gBAAgB,QAAQ;AACnC,WAAKzB,YAAY0B,aAAa,UAAU,EAAE;IAC5C,OAAO;AACL,WAAK1B,YAAYyB,gBAAgB,QAAQ;AACzC,WAAKzB,YAAY0B,aAAa,iBAAiB,KAAKxB,WAAWyB,SAAQ,CAAE;AAEzE,UAAI,KAAKzB,YAAY;AACnB,aAAKD,MAAMwB,gBAAgB,QAAQ;MACrC,OAAO;AACL,aAAKxB,MAAMyB,aAAa,UAAU,EAAE;MACtC;IACF;EACF;EAUAX,wBAAwB;AACtB,SAAKb,aAAa,CAAC,KAAKA;AACxB,SAAKoB,UAAS;EAChB;AAMF;AAlKa1B,OAiKJgC,aAAa;;;AChKf,IAAMC,qBAAN,MAAMA,4BAA2BC,uBAAuB;;;;;EAc7DC,YAAYC,SAASC,SAAS,CAAA,GAAI;AAChC,UAAK;AAAE,SAbTD,UAAO;AAAA,SAMPC,SAAM;AASJ,QAAI,EAAED,mBAAmBE,cAAc;AACrC,YAAM,IAAIC,aAAa;QACrBC,eAAe;QACfC,SAASL;QACTM,YAAY;MACd,CAAC;IACH;AAEA,SAAKN,UAAUA;AAEf,SAAKC,SAASM,aACZV,oBAAmBW,UACnBP,QACAQ,iBAAiBT,QAAQU,OAAO,CAClC;AAaA,QACE,KAAKV,QAAQW,aAAa,MAAM,MAAM,WACtC,CAAC,KAAKV,OAAOW,kBACb;AACAC,eAAS,KAAKb,OAAO;IACvB;EACF;AAiBF;AAnEaH,mBAuDJiB,aAAa;AAvDTjB,mBAgEJW,WAAWO,OAAOC,OAAO;EAC9BJ,kBAAkB;AACpB,CAAC;;;ACpEI,IAAMK,SAAN,cAAqBC,uBAAuB;;;;;;;;;;;;;;;EAqBjDC,YAAYC,SAAS;AACnB,UAAK;AAAE,SApBTA,UAAO;AAAA,SAGPC,UAAO;AAmBL,QAAI,EAAED,mBAAmBE,cAAc;AACrC,YAAM,IAAIC,aAAa;QACrBC,eAAe;QACfC,SAASL;QACTM,YAAY;MACd,CAAC;IACH;AAEA,UAAML,UAAUD,QAAQO,iBAAiB,qBAAqB;AAC9D,QAAI,CAACN,QAAQO,QAAQ;AACnB,YAAM,IAAIL,aAAa;QACrBC,eAAe;QACfE,YAAY;MACd,CAAC;IACH;AAEA,SAAKN,UAAUA;AACf,SAAKC,UAAUA;AAEf,SAAKA,QAAQQ,QAASC,YAAW;AAC/B,YAAMC,WAAWD,OAAOE,aAAa,oBAAoB;AAGzD,UAAI,CAACD,UAAU;AACb;MACF;AAGA,UAAI,CAACE,SAASC,eAAeH,QAAQ,GAAG;AACtC,cAAM,IAAIR,aAAa;UACrBC,eAAe;UACfE,YAAa,6BAA4BK,QAAS;QACpD,CAAC;MACH;AAIAD,aAAOK,aAAa,iBAAiBJ,QAAQ;AAC7CD,aAAOM,gBAAgB,oBAAoB;IAC7C,CAAC;AAKDC,WAAOC,iBAAiB,YAAY,MAAM,KAAKC,0BAAyB,CAAE;AAK1E,SAAKA,0BAAyB;AAG9B,SAAKnB,QAAQkB,iBAAiB,SAAUE,WAAU,KAAKC,YAAYD,KAAK,CAAC;EAC3E;EAOAD,4BAA4B;AAC1B,SAAKlB,QAAQQ,QAASC,YACpB,KAAKY,oCAAoCZ,MAAM,CACjD;EACF;EAWAY,oCAAoCZ,QAAQ;AAC1C,UAAMC,WAAWD,OAAOE,aAAa,eAAe;AACpD,QAAI,CAACD,UAAU;AACb;IACF;AAEA,UAAMY,UAAUV,SAASC,eAAeH,QAAQ;AAChD,QAAIY,WAAAA,QAAAA,QAASC,UAAUC,SAAS,2BAA2B,GAAG;AAC5D,YAAMC,iBAAiBhB,OAAOiB;AAE9BjB,aAAOK,aAAa,iBAAiBW,eAAeE,SAAQ,CAAE;AAC9DL,cAAQC,UAAUK,OAChB,qCACA,CAACH,cACH;IACF;EACF;EAaAL,YAAYD,OAAO;AACjB,UAAMU,gBAAgBV,MAAMW;AAG5B,QACE,EAAED,yBAAyBE,qBAC3BF,cAAcG,SAAS,SACvB;AACA;IACF;AAIA,UAAMC,aAAarB,SAASN,iBAC1B,oCACF;AAEA,UAAM4B,oBAAoBL,cAAcM;AACxC,UAAMC,oBAAoBP,cAAcQ;AAExCJ,eAAWzB,QAASC,YAAW;AAC7B,YAAM6B,mBAAmB7B,OAAO0B,SAASD;AACzC,YAAMK,cAAc9B,OAAO4B,SAASD;AAEpC,UAAIG,eAAeD,kBAAkB;AACnC,aAAKjB,oCAAoCZ,MAAM;MACjD;IACF,CAAC;EACH;AAMF;AAlKab,OAiKJ4C,aAAa;;;AChKf,IAAMC,WAAN,cAAuBC,uBAAuB;;;;;;;EAUnDC,YAAYC,SAAS;AAAA,QAAAC;AACnB,UAAK;AAAE,SATTD,UAAO;AAWL,QAAI,EAAEA,mBAAmBE,oBAAoB;AAC3C,YAAM,IAAIC,aAAa;QACrBC,eAAe;QACfC,SAASL;QACTM,cAAc;QACdC,YAAY;MACd,CAAC;IACH;AAEA,SAAKP,UAAUA;AAEf,UAAMQ,OAAO,KAAKR,QAAQQ;AAC1B,UAAMC,QAAIR,wBAAG,KAAKD,QAAQU,aAAa,MAAM,MAACT,OAAAA,wBAAI;AAGlD,QAAIU;AASJ,QAAI;AACFA,YAAM,IAAIC,OAAOC,IAAI,KAAKb,QAAQS,IAAI;aAC/BK,OAAO;AACd,YAAM,IAAIX,aACP,mCAAkCM,IAAK,iBAC1C;IACF;AAGA,QACEE,IAAII,WAAWH,OAAOI,SAASD,UAC/BJ,IAAIM,aAAaL,OAAOI,SAASC,UACjC;AACA;IACF;AAEA,UAAMC,kBAAkBC,mBAAmBX,IAAI;AAG/C,QAAI,CAACU,iBAAiB;AACpB,YAAM,IAAIf,aACP,mCAAkCM,IAAK,2BAC1C;IACF;AAEA,UAAMW,iBAAiBC,SAASC,eAAeJ,eAAe;AAG9D,QAAI,CAACE,gBAAgB;AACnB,YAAM,IAAIjB,aAAa;QACrBC,eAAe;QACfC,SAASe;QACTb,YAAa,yBAAwBW,eAAgB;MACvD,CAAC;IACH;AAQA,SAAKlB,QAAQuB,iBAAiB,SAAS,MACrCC,SAASJ,gBAAgB;MACvBK,gBAAgB;AACdL,uBAAeM,UAAUC,IAAI,iCAAiC;;MAEhEC,SAAS;AACPR,uBAAeM,UAAUG,OAAO,iCAAiC;MACnE;IACF,CAAC,CACH;EACF;AAMF;AA/FahC,SA8FJiC,aAAa;;;AC9Ff,IAAMC,OAAN,cAAmBC,uBAAuB;;;;EAwC/CC,YAAYC,SAAS;AACnB,UAAK;AAAE,SAvCTA,UAAO;AAAA,SAGPC,QAAK;AAAA,SAGLC,WAAQ;AAAA,SAGRC,gBAAa;AAAA,SAGbC,OAAO;MAAEC,MAAM;MAAIC,OAAO;MAAIC,IAAI;MAAIC,MAAM;;AAAI,SAGhDC,gBAAgB;AAA2B,SAG3CC,eAAe;AAAK,SAGpBC,gBAAa;AAAA,SAGbC,kBAAe;AAAA,SAGfC,oBAAiB;AAAA,SAMjBC,MAAM;AAQJ,QAAI,CAACd,SAAS;AACZ,YAAM,IAAIe,aAAa;QACrBC,eAAe;QACfC,SAASjB;QACTkB,YAAY;MACd,CAAC;IACH;AAEA,UAAMjB,QAAQD,QAAQmB,iBAAiB,mBAAmB;AAC1D,QAAI,CAAClB,MAAMmB,QAAQ;AACjB,YAAM,IAAIL,aAAa;QACrBC,eAAe;QACfE,YAAY;MACd,CAAC;IACH;AAEA,SAAKlB,UAAUA;AACf,SAAKC,QAAQA;AAGb,SAAKU,gBAAgB,KAAKU,WAAWC,KAAK,IAAI;AAC9C,SAAKV,kBAAkB,KAAKW,aAAaD,KAAK,IAAI;AAClD,SAAKT,oBAAoB,KAAKW,aAAaF,KAAK,IAAI;AAEpD,UAAMpB,WAAW,KAAKF,QAAQyB,cAAc,mBAAmB;AAC/D,UAAMtB,gBAAgB,KAAKH,QAAQmB,iBACjC,0BACF;AAEA,QAAI,CAACjB,UAAU;AACb,YAAM,IAAIa,aAAa;QACrBC,eAAe;QACfE,YAAY;MACd,CAAC;IACH;AAEA,QAAI,CAACf,cAAciB,QAAQ;AACzB,YAAM,IAAIL,aAAa;QACrBC,eAAe;QACfE,YAAY;MACd,CAAC;IACH;AAEA,SAAKhB,WAAWA;AAChB,SAAKC,gBAAgBA;AAErB,SAAKuB,sBAAqB;EAC5B;EAOAA,wBAAwB;AACtB,UAAMC,aAAaC,cAAc,QAAQ;AAEzC,QAAI,CAACD,WAAWE,OAAO;AACrB,YAAM,IAAId,aAAa;QACrBC,eAAe;QACfE,YAAa,0BAAyBS,WAAWG,QAAS;MAC5D,CAAC;IACH;AAGA,SAAKhB,MAAMiB,OAAOC,WAAY,eAAcL,WAAWE,KAAM,GAAE;AAI/D,QAAI,sBAAsB,KAAKf,KAAK;AAClC,WAAKA,IAAImB,iBAAiB,UAAU,MAAM,KAAKC,UAAS,CAAE;IAC5D,OAAO;AAGL,WAAKpB,IAAIqB,YAAY,MAAM,KAAKD,UAAS,CAAE;IAC7C;AAEA,SAAKA,UAAS;EAChB;EAOAA,YAAY;AAAA,QAAAE;AACV,SAAAA,YAAI,KAAKtB,QAALsB,QAAAA,UAAUC,SAAS;AACrB,WAAKC,MAAK;IACZ,OAAO;AACL,WAAKC,SAAQ;IACf;EACF;EAOAD,QAAQ;AAAA,QAAAE;AACN,SAAKtC,SAASuC,aAAa,QAAQ,SAAS;AAE5C,SAAKtC,cAAcuC,QAASC,WAAU;AACpCA,YAAMF,aAAa,QAAQ,cAAc;IAC3C,CAAC;AAED,SAAKxC,MAAMyC,QAASE,UAAS;AAE3B,WAAKC,cAAcD,IAAI;AAGvBA,WAAKX,iBAAiB,SAAS,KAAKtB,eAAe,IAAI;AACvDiC,WAAKX,iBAAiB,WAAW,KAAKrB,iBAAiB,IAAI;AAG3D,WAAKkC,QAAQF,IAAI;IACnB,CAAC;AAGD,UAAMG,cAAUP,eAAG,KAAKQ,OAAOjB,OAAOkB,SAASC,IAAI,MAAC,OAAAV,eAAI,KAAKvC,MAAM,CAAC;AAEpE,SAAKkD,QAAQJ,UAAU;AAGvBhB,WAAOE,iBAAiB,cAAc,KAAKpB,mBAAmB,IAAI;EACpE;EAOA0B,WAAW;AACT,SAAKrC,SAASkD,gBAAgB,MAAM;AAEpC,SAAKjD,cAAcuC,QAASC,WAAU;AACpCA,YAAMS,gBAAgB,MAAM;IAC9B,CAAC;AAED,SAAKnD,MAAMyC,QAASE,UAAS;AAE3BA,WAAKS,oBAAoB,SAAS,KAAK1C,eAAe,IAAI;AAC1DiC,WAAKS,oBAAoB,WAAW,KAAKzC,iBAAiB,IAAI;AAG9D,WAAK0C,gBAAgBV,IAAI;IAC3B,CAAC;AAGDb,WAAOsB,oBAAoB,cAAc,KAAKxC,mBAAmB,IAAI;EACvE;EAQAW,eAAe;AACb,UAAM0B,OAAOnB,OAAOkB,SAASC;AAC7B,UAAMK,eAAe,KAAKP,OAAOE,IAAI;AACrC,QAAI,CAACK,cAAc;AACjB;IACF;AAGA,QAAI,KAAK7C,cAAc;AACrB,WAAKA,eAAe;AACpB;IACF;AAGA,UAAM8C,eAAe,KAAKC,cAAa;AACvC,QAAI,CAACD,cAAc;AACjB;IACF;AAEA,SAAKV,QAAQU,YAAY;AACzB,SAAKL,QAAQI,YAAY;AACzBA,iBAAaG,MAAK;EACpB;EAQAZ,QAAQF,MAAM;AACZ,SAAKe,eAAef,IAAI;AACxB,SAAKgB,UAAUhB,IAAI;EACrB;EAQAO,QAAQP,MAAM;AACZ,SAAKiB,aAAajB,IAAI;AACtB,SAAKkB,UAAUlB,IAAI;EACrB;EASAI,OAAOE,MAAM;AACX,WAAO,KAAKlD,QAAQyB,cAAe,2BAA0ByB,IAAK,IAAG;EACvE;EAQAL,cAAcD,MAAM;AAClB,UAAMmB,UAAUC,mBAAmBpB,KAAKqB,IAAI;AAC5C,QAAI,CAACF,SAAS;AACZ;IACF;AAGAnB,SAAKH,aAAa,MAAO,OAAMsB,OAAQ,EAAC;AACxCnB,SAAKH,aAAa,QAAQ,KAAK;AAC/BG,SAAKH,aAAa,iBAAiBsB,OAAO;AAC1CnB,SAAKH,aAAa,iBAAiB,OAAO;AAC1CG,SAAKH,aAAa,YAAY,IAAI;AAGlC,UAAMyB,SAAS,KAAKC,SAASvB,IAAI;AACjC,QAAI,CAACsB,QAAQ;AACX;IACF;AAEAA,WAAOzB,aAAa,QAAQ,UAAU;AACtCyB,WAAOzB,aAAa,mBAAmBG,KAAKwB,EAAE;AAC9CF,WAAOG,UAAUC,IAAI,KAAK7D,aAAa;EACzC;EAQA6C,gBAAgBV,MAAM;AAEpBA,SAAKQ,gBAAgB,IAAI;AACzBR,SAAKQ,gBAAgB,MAAM;AAC3BR,SAAKQ,gBAAgB,eAAe;AACpCR,SAAKQ,gBAAgB,eAAe;AACpCR,SAAKQ,gBAAgB,UAAU;AAG/B,UAAMc,SAAS,KAAKC,SAASvB,IAAI;AACjC,QAAI,CAACsB,QAAQ;AACX;IACF;AAEAA,WAAOd,gBAAgB,MAAM;AAC7Bc,WAAOd,gBAAgB,iBAAiB;AACxCc,WAAOG,UAAUE,OAAO,KAAK9D,aAAa;EAC5C;EASAY,WAAWmD,OAAO;AAChB,UAAMC,cAAc,KAAKhB,cAAa;AACtC,UAAMiB,WAAWF,MAAMG;AAEvB,QAAI,CAACF,eAAe,EAAEC,oBAAoBE,oBAAoB;AAC5D;IACF;AAEAJ,UAAMK,eAAc;AAEpB,SAAK/B,QAAQ2B,WAAW;AACxB,SAAKtB,QAAQuB,QAAQ;AACrB,SAAKI,mBAAmBJ,QAAQ;EAClC;EAWAI,mBAAmBlC,MAAM;AACvB,UAAMsB,SAAS,KAAKC,SAASvB,IAAI;AACjC,QAAI,CAACsB,QAAQ;AACX;IACF;AAIA,UAAMH,UAAUG,OAAOE;AACvBF,WAAOE,KAAK;AACZ,SAAK1D,eAAe;AACpBqB,WAAOkB,SAASC,OAAOa;AACvBG,WAAOE,KAAKL;EACd;EAWAxC,aAAaiD,OAAO;AAClB,YAAQA,MAAMO,SAAO;MACnB,KAAK,KAAK3E,KAAKC;MACf,KAAK,KAAKD,KAAKG;AACb,aAAKyE,oBAAmB;AACxBR,cAAMK,eAAc;AACpB;MACF,KAAK,KAAKzE,KAAKE;MACf,KAAK,KAAKF,KAAKI;AACb,aAAKyE,gBAAe;AACpBT,cAAMK,eAAc;AACpB;IACJ;EACF;EAOAI,kBAAkB;AAChB,UAAMR,cAAc,KAAKhB,cAAa;AACtC,QAAI,EAACgB,eAAW,QAAXA,YAAaS,gBAAe;AAC/B;IACF;AAEA,UAAMC,mBAAmBV,YAAYS,cAAcE;AACnD,QAAI,CAACD,kBAAkB;AACrB;IACF;AAEA,UAAMT,WAAWS,iBAAiB1D,cAAc,mBAAmB;AACnE,QAAI,CAACiD,UAAU;AACb;IACF;AAEA,SAAK5B,QAAQ2B,WAAW;AACxB,SAAKtB,QAAQuB,QAAQ;AACrBA,aAAShB,MAAK;AACd,SAAKoB,mBAAmBJ,QAAQ;EAClC;EAOAM,sBAAsB;AACpB,UAAMP,cAAc,KAAKhB,cAAa;AACtC,QAAI,EAACgB,eAAW,QAAXA,YAAaS,gBAAe;AAC/B;IACF;AAEA,UAAMG,uBACJZ,YAAYS,cAAcI;AAC5B,QAAI,CAACD,sBAAsB;AACzB;IACF;AAEA,UAAM7B,eAAe6B,qBAAqB5D,cAAc,mBAAmB;AAC3E,QAAI,CAAC+B,cAAc;AACjB;IACF;AAEA,SAAKV,QAAQ2B,WAAW;AACxB,SAAKtB,QAAQK,YAAY;AACzBA,iBAAaE,MAAK;AAClB,SAAKoB,mBAAmBtB,YAAY;EACtC;EASAW,SAASvB,MAAM;AACb,UAAMmB,UAAUC,mBAAmBpB,KAAKqB,IAAI;AAC5C,QAAI,CAACF,SAAS;AACZ,aAAO;IACT;AAEA,WAAO,KAAK/D,QAAQyB,cAAe,IAAGsC,OAAQ,EAAC;EACjD;EAQAD,UAAUlB,MAAM;AACd,UAAMsB,SAAS,KAAKC,SAASvB,IAAI;AACjC,QAAI,CAACsB,QAAQ;AACX;IACF;AAEAA,WAAOG,UAAUE,OAAO,KAAK9D,aAAa;EAC5C;EAQAmD,UAAUhB,MAAM;AACd,UAAMsB,SAAS,KAAKC,SAASvB,IAAI;AACjC,QAAI,CAACsB,QAAQ;AACX;IACF;AAEAA,WAAOG,UAAUC,IAAI,KAAK7D,aAAa;EACzC;EAQAkD,eAAef,MAAM;AACnB,QAAI,CAACA,KAAKsC,eAAe;AACvB;IACF;AAEAtC,SAAKH,aAAa,iBAAiB,OAAO;AAC1CG,SAAKsC,cAAcb,UAAUE,OAAO,iCAAiC;AACrE3B,SAAKH,aAAa,YAAY,IAAI;EACpC;EAQAoB,aAAajB,MAAM;AACjB,QAAI,CAACA,KAAKsC,eAAe;AACvB;IACF;AAEAtC,SAAKH,aAAa,iBAAiB,MAAM;AACzCG,SAAKsC,cAAcb,UAAUC,IAAI,iCAAiC;AAClE1B,SAAKH,aAAa,YAAY,GAAG;EACnC;EAQAgB,gBAAgB;AACd,WAAO,KAAKzD,QAAQyB,cAClB,oDACF;EACF;AAMF;AAnhBa5B,KAkhBJ0F,aAAa;;;AClgBtB,SAASC,QAAQC,QAAQ;AAAA,MAAAC;AACvBD,WAAS,OAAOA,WAAW,cAAcA,SAAS,CAAA;AAGlD,MAAI,CAACE,YAAW,GAAI;AAClBC,YAAQC,IAAI,IAAIC,aAAY,CAAE;AAC9B;EACF;AAEA,QAAMC,aAAmC,CACvC,CAACC,WAAWP,OAAOQ,SAAS,GAC5B,CAACC,QAAQT,OAAOU,MAAM,GACtB,CAACC,gBAAgBX,OAAOY,cAAc,GACtC,CAACC,UAAU,GACX,CAACC,cAAcd,OAAOe,YAAY,GAClC,CAACC,cAAchB,OAAOiB,YAAY,GAClC,CAACC,MAAM,GACP,CAACC,oBAAoBnB,OAAOoB,kBAAkB,GAC9C,CAACC,MAAM,GACP,CAACC,QAAQ,GACT,CAACC,IAAI,CAAC;AAKR,QAAMC,UAAMvB,gBAAGD,OAAOyB,UAAK,OAAAxB,gBAAIyB;AAE/BpB,aAAWqB,QAAQ,CAAC,CAACC,WAAW5B,OAAM,MAAM;AAC1C,UAAM6B,YAAYL,OAAOM,iBACtB,iBAAgBF,UAAUG,UAAW,IACxC;AAEAF,cAAUF,QAASK,cAAa;AAC9B,UAAI;AAEF,sBAAcJ,YACV,IAAIA,UAAUI,UAAUhC,OAAM,IAC9B,IAAI4B,UAAUI,QAAQ;eACnBC,OAAO;AACd9B,gBAAQC,IAAI6B,KAAK;MACnB;IACF,CAAC;EACH,CAAC;AACH;;;AClEA,QAAQ;AAER,SAAS,iBAAiB,oBAAoB,MAAM;AAChD,MAAI,iBAAiB;AAErB,gBAAc,CAAC,MAAM;AACjB,QAAI,gBAAgB;AAChB,QAAE,eAAe;AACjB,aAAO;AAAA,IACX;AACA,qBAAiB;AAAA,EACrB;AAEA,QAAM,kBAAkB,SAAS,uBAAuB,cAAc,EAAE,CAAC;AACzE,MAAI,iBAAiB;AACjB,UAAM,mBAAmB,SAAS,uBAAuB,qBAAqB,EAAE,CAAC;AACjF,QAAI,kBAAkB;AAClB,YAAM,iBAAiB,SAAS,uBAAuB,wBAAwB,EAAE,CAAC;AAClF,sBAAgB,iBAAiB,UAAU,CAAC,MAAM;AAC9C,YAAI,gBAAgB;AAChB,yBAAe,WAAW;AAAA,QAC9B;AACA,wBAAgB,KAAK,OAAO;AAC5B,wBAAgB,WAAW;AAAA,MAC/B,CAAC;AAED,uBAAiB,MAAM,UAAU;AAAA,IACrC;AAAA,EACJ;AAEA,QAAM,aAAa,SAAS,uBAAuB,gBAAgB,EAAE,CAAC;AACtE,MAAI,YAAY;AACZ,UAAM,UAAU,SAAS,uBAAuB,YAAY;AAC5D,QAAI,SAAS;AACT,iBAAW,MAAM,UAAU;AAC3B,eAAS,MAAM,GAAG,MAAM,QAAQ,QAAQ,OAAO;AAC3C,gBAAQ,GAAG,EAAE,iBAAiB,UAAU,CAAC,MAAM;AAC3C,YAAE,OAAO,KAAK,OAAO;AAAA,QACzB,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AAEA,QAAM,kBAAkB,SAAS,uBAAuB,iBAAiB,EAAE,CAAC;AAC5E,MAAI,iBAAiB;AACjB,UAAM,eAAe,SAAS,uBAAuB,gBAAgB,EAAE,CAAC;AACxE,UAAM,YAAY,SAAS,uBAAuB,YAAY,EAAE,CAAC;AACjE,UAAM,eAAe,SAAS,uBAAuB,gBAAgB,EAAE,CAAC;AACxE,QAAI,gBAAgB,aAAa,cAAc;AAM3C,UAAS,UAAT,SAAiB,OAAO;AACpB,qBAAa,MAAM,UAAU,SAAS,UAAU,UAAQ;AACxD,kBAAU,MAAM,UAAU,SAAS,QAAQ,SAAO;AAClD,qBAAa,MAAM,UAAU,SAAS,QAAQ,UAAQ;AAAA,MAC1D;AATA,cAAQ,gBAAgB,KAAK;AAC7B,sBAAgB,iBAAiB,UAAU,CAAC,MAAM;AAC9C,gBAAQ,EAAE,OAAO,KAAK;AAAA,MAC1B,CAAC;AAAA,IAOL;AAAA,EACJ;AAEA,QAAM,iBAAiB,SAAS,uBAAuB,gBAAgB,EAAE,CAAC;AAC1E,MAAI,gBAAgB;AAChB,UAAM,cAAc,SAAS,uBAAuB,eAAe,EAAE,CAAC;AACtE,QAAI,gBAAgB;AAMhB,UAAS,aAAT,SAAoB,OAAO;AACvB,oBAAY,MAAM,UAAU,SAAS,eAAe,UAAQ;AAAA,MAChE;AAPA,iBAAW,eAAe,KAAK;AAC/B,qBAAe,iBAAiB,UAAU,CAAC,MAAM;AAC7C,mBAAW,EAAE,OAAO,KAAK;AAAA,MAC7B,CAAC;AAAA,IAKL;AAAA,EACJ;AAEA,QAAM,mBAAmB,SAAS,uBAAuB,uBAAuB,EAAE,CAAC;AACnF,MAAI,kBAAkB;AAClB,qBAAiB,iBAAiB,SAAS,WAAW;AACtD,qBAAiB,YAAY,CAAC,MAAM;AAChC,uBAAiB;AAAA,IACrB,CAAC;AAAA,EACL;AAEA,QAAM,gBAAiB,SAAS,uBAAuB,gBAAgB,EAAE,CAAC;AAC1E,MAAI,eAAe;AACf,UAAM,cAAc,SAAS,uBAAuB,kBAAkB,EAAE,CAAC;AACzE,QAAI,aAAa;AACb,YAAM,UAAU,IAAI,KAAK,cAAc,aAAa,cAAc,CAAC;AACnE,kBAAY,MAAM,UAAU,cAAc,SAAS,MAAM,IAAI,KAAK,cAAc,KAAK,KAAK,UAAU,SAAS;AAC7G,oBAAc,iBAAiB,UAAU,CAAC,MAAM;AAC5C,oBAAY,MAAM,UAAU,IAAI,KAAK,EAAE,OAAO,KAAK,KAAK,UAAW,SAAS;AAAA,MAChF,CAAC;AAAA,IACL;AAAA,EACJ;AAEA,QAAM,eAAe,SAAS,uBAAuB,iBAAiB,EAAE,CAAC;AACzE,MAAI,cAAc;AACd,UAAM,eAAe,SAAS,uBAAuB,iBAAiB,EAAE,CAAC;AACzE,UAAM,SAAS,SAAS,uBAAuB,UAAU,EAAE,CAAC;AAC5D,UAAM,SAAS,SAAS,uBAAuB,UAAU,EAAE,CAAC;AAC5D,QAAI,OAAO,UAAU,IAAI;AACrB,eAAS,uBAAuB,aAAa,EAAE,CAAC,EAAE,MAAM,UAAU;AAClE,eAAS,uBAAuB,aAAa,EAAE,CAAC,EAAE,MAAM,UAAU;AAAA,IACtE,OACK;AACD,YAAMC,gBAAe,SAAS,uBAAuB,iBAAiB,EAAE,CAAC;AAEzE,eAAS,QAAQ,GAAG,QAAQA,cAAa,QAAQ,QAAQ,SAAS;AAC9D,cAAM,UAAUA,cAAa,QAAQ,KAAK;AAC1C,YAAI,QAAQ,cAAc,YAAY,YAAY;AAC9C,kBAAQ,SAAU,QAAQ,cAAc,UAAU,OAAO;AACzD,kBAAQ,cAAc,SAAS,QAAQ;AACvC,kBAAQ,WAAW,CAAC,QAAQ,UAAW,QAAQ,UAAU,OAAO;AAAA,QACpE;AAAA,MACJ;AACA,eAAS,uBAAuB,oBAAoB,EAAE,CAAC,EAAE,MAAM,UAAU;AACzE,UAAI,OAAO,UAAU,IAAI;AACrB,iBAAS,uBAAuB,aAAa,EAAE,CAAC,EAAE,MAAM,UAAU;AAAA,MACtE;AAAA,IACJ;AAGA,iBAAa,iBAAiB,UAAU,CAAC,MAAM;AAC3C,YAAMC,UAAS,SAAS,uBAAuB,UAAU,EAAE,CAAC;AAC5D,YAAMC,UAAS,SAAS,uBAAuB,UAAU,EAAE,CAAC;AAC5D,UAAI,EAAE,OAAO,UAAU,IAAI;AACvB,QAAAD,QAAO,QAAQ;AACf,QAAAC,QAAO,QAAQ;AACf,iBAAS,uBAAuB,aAAa,EAAE,CAAC,EAAE,MAAM,UAAU;AAClE,iBAAS,uBAAuB,aAAa,EAAE,CAAC,EAAE,MAAM,UAAU;AAClE,iBAAS,uBAAuB,oBAAoB,EAAE,CAAC,EAAE,MAAM,UAAU;AAAA,MAC7E,OACK;AACD,QAAAD,QAAO,QAAQ,EAAE,OAAO;AACxB,iBAAS,uBAAuB,aAAa,EAAE,CAAC,EAAE,MAAM,UAAU;AAClE,cAAMD,gBAAe,SAAS,uBAAuB,iBAAiB,EAAE,CAAC;AAEzE,iBAAS,QAAQ,GAAG,QAAQA,cAAa,QAAQ,QAAQ,SAAS;AAC9D,gBAAM,UAAUA,cAAa,QAAQ,KAAK;AAC1C,cAAI,QAAQ,cAAc,YAAY,YAAY;AAC9C,oBAAQ,SAAU,QAAQ,cAAc,UAAU,EAAE,OAAO;AAC3D,oBAAQ,cAAc,SAAS,QAAQ;AACvC,oBAAQ,WAAW,CAAC,QAAQ,UAAW,QAAQ,UAAUE,QAAO;AAAA,UACpE;AAAA,QACJ;AACA,cAAM,iBAAiB,SAAS,uBAAuB,oBAAoB,EAAE,CAAC,EAAE,MAAM,UAAU;AAChG,YAAIF,cAAa,gBAAgB,CAAC,EAAE,UAAU,IAAI;AAC9C,UAAAE,QAAO,QAAQ;AACf,gBAAM,WAAW,SAAS,uBAAuB,aAAa,EAAE,CAAC,EAAE,MAAM,UAAU;AAAA,QACvF,OACK;AACD,gBAAM,WAAW,SAAS,uBAAuB,aAAa,EAAE,CAAC,EAAE,MAAM,UAAU;AAAA,QACvF;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,iBAAa,iBAAiB,UAAU,CAAC,MAAM;AAC3C,YAAMA,UAAS,SAAS,uBAAuB,UAAU,EAAE,CAAC;AAC5D,UAAI,EAAE,OAAO,UAAU,IAAI;AACvB,QAAAA,QAAO,QAAQ;AACf,iBAAS,uBAAuB,aAAa,EAAE,CAAC,EAAE,MAAM,UAAU;AAAA,MACtE,OACK;AACD,QAAAA,QAAO,QAAQ,EAAE,OAAO;AACxB,iBAAS,uBAAuB,aAAa,EAAE,CAAC,EAAE,MAAM,UAAU;AAAA,MACtE;AAAA,IACJ,CAAC;AAAA,EACL;AACJ,CAAC;",
  "names": ["mergeConfigs", "configObjects", "flattenObject", "configObject", "flattenedObject", "flattenLoop", "obj", "prefix", "key", "value", "Object", "entries", "prefixedKey", "formattedConfigObject", "extractConfigByNamespace", "namespace", "newObject", "keyParts", "split", "length", "shift", "newKey", "join", "getFragmentFromUrl", "url", "includes", "undefined", "pop", "getBreakpoint", "name", "property", "window", "getComputedStyle", "document", "documentElement", "getPropertyValue", "setFocus", "$element", "options", "_options$onBeforeFocu", "isFocusable", "getAttribute", "setAttribute", "onFocus", "addEventListener", "onBlur", "once", "_options$onBlur", "call", "removeAttribute", "onBeforeFocus", "focus", "isSupported", "$scope", "body", "classList", "contains", "validateConfig", "schema", "config", "validationErrors", "conditions", "errors", "required", "errorMessage", "every", "push", "normaliseString", "value", "trimmedValue", "trim", "length", "isFinite", "Number", "normaliseDataset", "dataset", "out", "key", "Object", "entries", "GOVUKFrontendError", "Error", "constructor", "args", "name", "SupportError", "$scope", "document", "body", "supportMessage", "HTMLScriptElement", "prototype", "ConfigError", "ElementError", "messageOrOptions", "message", "componentName", "identifier", "element", "expectedType", "GOVUKFrontendComponent", "constructor", "checkSupport", "isSupported", "SupportError", "I18n", "constructor", "translations", "config", "_config$locale", "locale", "document", "documentElement", "lang", "t", "lookupKey", "options", "Error", "count", "getPluralSuffix", "translationString", "match", "replacePlaceholders", "formatter", "Intl", "NumberFormat", "supportedLocalesOf", "length", "undefined", "replace", "placeholderWithBraces", "placeholderKey", "Object", "prototype", "hasOwnProperty", "call", "placeholderValue", "format", "hasIntlPluralRulesSupport", "Boolean", "window", "PluralRules", "Number", "isFinite", "preferredForm", "select", "selectPluralFormUsingFallbackRules", "console", "warn", "Math", "abs", "floor", "ruleset", "getPluralRulesForLocale", "pluralRules", "localeShort", "split", "pluralRule", "pluralRulesMap", "languages", "includes", "arabic", "chinese", "french", "german", "irish", "russian", "scottish", "spanish", "welsh", "n", "lastTwo", "last", "Accordion", "GOVUKFrontendComponent", "constructor", "$module", "config", "i18n", "controlsClass", "showAllClass", "showAllTextClass", "sectionClass", "sectionExpandedClass", "sectionButtonClass", "sectionHeaderClass", "sectionHeadingClass", "sectionHeadingDividerClass", "sectionHeadingTextClass", "sectionHeadingTextFocusClass", "sectionShowHideToggleClass", "sectionShowHideToggleFocusClass", "sectionShowHideTextClass", "upChevronIconClass", "downChevronIconClass", "sectionSummaryClass", "sectionSummaryFocusClass", "sectionContentClass", "$sections", "browserSupportsSessionStorage", "$showAllButton", "$showAllIcon", "$showAllText", "HTMLElement", "ElementError", "componentName", "element", "identifier", "mergeConfigs", "defaults", "normaliseDataset", "dataset", "I18n", "extractConfigByNamespace", "querySelectorAll", "length", "helper", "checkForSessionStorage", "initControls", "initSectionHeaders", "areAllSectionsOpen", "checkIfAllSectionsOpen", "updateShowAllButton", "document", "createElement", "setAttribute", "classList", "add", "appendChild", "$accordionControls", "insertBefore", "firstChild", "addEventListener", "onShowOrHideAllToggle", "event", "onBeforeMatch", "forEach", "$section", "i", "$header", "querySelector", "constructHeaderMarkup", "setExpanded", "isExpanded", "onSectionToggle", "setInitialState", "index", "$span", "$heading", "$summary", "$button", "id", "attr", "Array", "from", "attributes", "nodeName", "nodeValue", "$headingText", "$headingTextFocus", "innerHTML", "$showHideToggle", "$showHideToggleFocus", "$showHideText", "$showHideIcon", "getButtonPunctuationEl", "parentNode", "$summarySpan", "$summarySpanFocus", "replaceChild", "removeChild", "$fragment", "target", "Element", "closest", "expanded", "storeState", "nowExpanded", "$content", "newButtonText", "t", "textContent", "ariaLabelParts", "push", "trim", "ariaLabelMessage", "join", "removeAttribute", "remove", "contains", "sectionsCount", "expandedSectionCount", "toString", "toggle", "rememberExpanded", "contentId", "getAttribute", "contentState", "window", "sessionStorage", "setItem", "getItem", "$punctuationEl", "moduleName", "Object", "freeze", "hideAllSections", "hideSection", "hideSectionAriaLabel", "showAllSections", "showSection", "showSectionAriaLabel", "testString", "result", "removeItem", "exception", "KEY_SPACE", "DEBOUNCE_TIMEOUT_IN_SECONDS", "Button", "GOVUKFrontendComponent", "constructor", "$module", "config", "debounceFormSubmitTimer", "HTMLElement", "ElementError", "componentName", "element", "identifier", "mergeConfigs", "defaults", "normaliseDataset", "dataset", "addEventListener", "event", "handleKeyDown", "debounce", "$target", "target", "keyCode", "getAttribute", "preventDefault", "click", "preventDoubleClick", "window", "setTimeout", "moduleName", "Object", "freeze", "closestAttributeValue", "$element", "attributeName", "$closestElementWithAttribute", "closest", "getAttribute", "CharacterCount", "GOVUKFrontendComponent", "constructor", "$module", "config", "_ref", "_this$config$maxwords", "$textarea", "$visibleCountMessage", "$screenReaderCountMessage", "lastInputTimestamp", "lastInputValue", "valueChecker", "i18n", "maxLength", "HTMLElement", "ElementError", "componentName", "element", "identifier", "querySelector", "HTMLTextAreaElement", "HTMLInputElement", "expectedType", "datasetConfig", "normaliseDataset", "dataset", "configOverrides", "maxlength", "undefined", "maxwords", "mergeConfigs", "defaults", "errors", "validateConfig", "schema", "ConfigError", "I18n", "extractConfigByNamespace", "locale", "closestAttributeValue", "Infinity", "textareaDescriptionId", "id", "$textareaDescription", "document", "getElementById", "textContent", "match", "t", "count", "insertAdjacentElement", "createElement", "className", "setAttribute", "classList", "add", "removeAttribute", "bindChangeEvents", "window", "addEventListener", "updateCountMessage", "handleKeyUp", "handleFocus", "handleBlur", "updateVisibleCountMessage", "Date", "now", "setInterval", "updateIfValueChanged", "clearInterval", "value", "updateScreenReaderCountMessage", "remainingNumber", "isError", "toggle", "isOverThreshold", "getCountMessage", "text", "_text$match", "tokens", "length", "countType", "formatCountMessage", "translationKeySuffix", "Math", "abs", "threshold", "currentLength", "thresholdValue", "moduleName", "Object", "freeze", "charactersUnderLimit", "one", "other", "charactersAtLimit", "charactersOverLimit", "wordsUnderLimit", "wordsAtLimit", "wordsOverLimit", "textareaDescription", "anyOf", "required", "errorMessage", "Checkboxes", "GOVUKFrontendComponent", "constructor", "$module", "$inputs", "HTMLElement", "ElementError", "componentName", "element", "identifier", "querySelectorAll", "length", "forEach", "$input", "targetId", "getAttribute", "document", "getElementById", "setAttribute", "removeAttribute", "window", "addEventListener", "syncAllConditionalReveals", "event", "handleClick", "syncConditionalRevealWithInputState", "$target", "classList", "contains", "inputIsChecked", "checked", "toString", "toggle", "unCheckAllInputsExcept", "allInputsWithSameName", "name", "$inputWithSameName", "hasSameFormOwner", "form", "unCheckExclusiveInputs", "allInputsWithSameNameAndExclusiveBehaviour", "$exclusiveInput", "$clickedInput", "target", "HTMLInputElement", "type", "hasAriaControls", "hasBehaviourExclusive", "moduleName", "ErrorSummary", "GOVUKFrontendComponent", "constructor", "$module", "config", "HTMLElement", "ElementError", "componentName", "element", "identifier", "mergeConfigs", "defaults", "normaliseDataset", "dataset", "disableAutoFocus", "setFocus", "addEventListener", "event", "handleClick", "$target", "target", "focusTarget", "preventDefault", "HTMLAnchorElement", "inputId", "getFragmentFromUrl", "href", "$input", "document", "getElementById", "$legendOrLabel", "getAssociatedLegendOrLabel", "scrollIntoView", "focus", "preventScroll", "_document$querySelect", "$fieldset", "closest", "$legends", "getElementsByTagName", "length", "$candidateLegend", "HTMLInputElement", "type", "legendTop", "getBoundingClientRect", "top", "inputRect", "height", "window", "innerHeight", "inputBottom", "querySelector", "getAttribute", "moduleName", "Object", "freeze", "ExitThisPage", "GOVUKFrontendComponent", "constructor", "$module", "config", "i18n", "$button", "$skiplinkButton", "$updateSpan", "$indicatorContainer", "$overlay", "keypressCounter", "lastKeyWasModified", "timeoutTime", "keypressTimeoutId", "timeoutMessageId", "HTMLElement", "ElementError", "componentName", "element", "identifier", "querySelector", "HTMLAnchorElement", "expectedType", "mergeConfigs", "defaults", "normaliseDataset", "dataset", "I18n", "extractConfigByNamespace", "document", "buildIndicator", "initUpdateSpan", "initButtonClickHandler", "body", "addEventListener", "handleKeypress", "bind", "govukFrontendExitThisPageKeypress", "window", "resetPage", "createElement", "setAttribute", "className", "appendChild", "handleClick", "i", "$indicator", "updateIndicator", "classList", "toggle", "$indicators", "querySelectorAll", "forEach", "index", "exitPage", "textContent", "add", "t", "location", "href", "event", "preventDefault", "key", "keyCode", "which", "clearTimeout", "setKeypressTimer", "resetKeypressTimer", "shiftKey", "setTimeout", "remove", "moduleName", "Object", "freeze", "activated", "timedOut", "pressTwoMoreTimes", "pressOneMoreTime", "Header", "GOVUKFrontendComponent", "constructor", "$module", "$menuButton", "$menu", "menuIsOpen", "mql", "ElementError", "componentName", "element", "identifier", "querySelector", "menuId", "getAttribute", "document", "getElementById", "setupResponsiveChecks", "addEventListener", "handleMenuButtonClick", "breakpoint", "getBreakpoint", "value", "property", "window", "matchMedia", "checkMode", "addListener", "matches", "removeAttribute", "setAttribute", "toString", "moduleName", "NotificationBanner", "GOVUKFrontendComponent", "constructor", "$module", "config", "HTMLElement", "ElementError", "componentName", "element", "identifier", "mergeConfigs", "defaults", "normaliseDataset", "dataset", "getAttribute", "disableAutoFocus", "setFocus", "moduleName", "Object", "freeze", "Radios", "GOVUKFrontendComponent", "constructor", "$module", "$inputs", "HTMLElement", "ElementError", "componentName", "element", "identifier", "querySelectorAll", "length", "forEach", "$input", "targetId", "getAttribute", "document", "getElementById", "setAttribute", "removeAttribute", "window", "addEventListener", "syncAllConditionalReveals", "event", "handleClick", "syncConditionalRevealWithInputState", "$target", "classList", "contains", "inputIsChecked", "checked", "toString", "toggle", "$clickedInput", "target", "HTMLInputElement", "type", "$allInputs", "$clickedInputForm", "form", "$clickedInputName", "name", "hasSameFormOwner", "hasSameName", "moduleName", "SkipLink", "GOVUKFrontendComponent", "constructor", "$module", "_this$$module$getAttr", "HTMLAnchorElement", "ElementError", "componentName", "element", "expectedType", "identifier", "hash", "href", "getAttribute", "url", "window", "URL", "error", "origin", "location", "pathname", "linkedElementId", "getFragmentFromUrl", "$linkedElement", "document", "getElementById", "addEventListener", "setFocus", "onBeforeFocus", "classList", "add", "onBlur", "remove", "moduleName", "Tabs", "GOVUKFrontendComponent", "constructor", "$module", "$tabs", "$tabList", "$tabListItems", "keys", "left", "right", "up", "down", "jsHiddenClass", "changingHash", "boundTabClick", "boundTabKeydown", "boundOnHashChange", "mql", "ElementError", "componentName", "element", "identifier", "querySelectorAll", "length", "onTabClick", "bind", "onTabKeydown", "onHashChange", "querySelector", "setupResponsiveChecks", "breakpoint", "getBreakpoint", "value", "property", "window", "matchMedia", "addEventListener", "checkMode", "addListener", "_this$mql", "matches", "setup", "teardown", "_this$getTab", "setAttribute", "forEach", "$item", "$tab", "setAttributes", "hideTab", "$activeTab", "getTab", "location", "hash", "showTab", "removeAttribute", "removeEventListener", "unsetAttributes", "$tabWithHash", "$previousTab", "getCurrentTab", "focus", "unhighlightTab", "hidePanel", "highlightTab", "showPanel", "panelId", "getFragmentFromUrl", "href", "$panel", "getPanel", "id", "classList", "add", "remove", "event", "$currentTab", "$nextTab", "currentTarget", "HTMLAnchorElement", "preventDefault", "createHistoryEntry", "keyCode", "activatePreviousTab", "activateNextTab", "parentElement", "$nextTabListItem", "nextElementSibling", "$previousTabListItem", "previousElementSibling", "moduleName", "initAll", "config", "_config$scope", "isSupported", "console", "log", "SupportError", "components", "Accordion", "accordion", "Button", "button", "CharacterCount", "characterCount", "Checkboxes", "ErrorSummary", "errorSummary", "ExitThisPage", "exitThisPage", "Header", "NotificationBanner", "notificationBanner", "Radios", "SkipLink", "Tabs", "$scope", "scope", "document", "forEach", "Component", "$elements", "querySelectorAll", "moduleName", "$element", "error", "paOrg2Select", "paOrg1", "paOrg2"]
}
